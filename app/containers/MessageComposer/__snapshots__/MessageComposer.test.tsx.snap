// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MessageComposer Audio tap record 1`] = `
[
  <View
    style={
      {
        "backgroundColor": "#FFFFFF",
        "borderTopColor": "#CBCED1",
        "borderTopWidth": 1,
        "paddingBottom": 8,
        "paddingHorizontal": 16,
      }
    }
  >
    <View
      style={
        {
          "alignItems": "center",
          "flexDirection": "row",
          "justifyContent": "center",
          "paddingVertical": 24,
        }
      }
    >
      <Text
        allowFontScaling={false}
        selectable={false}
        style={
          [
            {
              "color": "#D40C26",
              "fontSize": NaN,
            },
            [
              {
                "lineHeight": NaN,
              },
              undefined,
            ],
            {
              "fontFamily": "custom",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
            {},
          ]
        }
      >
        
      </Text>
      <Text
        style={
          {
            "backgroundColor": "transparent",
            "color": "#2F343D",
            "fontFamily": "Inter",
            "fontSize": 16,
            "fontVariant": [
              "tabular-nums",
            ],
            "fontWeight": "400",
            "marginLeft": 12,
            "textAlign": "left",
          }
        }
      >
        00:00
      </Text>
    </View>
    <View
      style={
        {
          "alignItems": "center",
          "flexDirection": "row",
          "justifyContent": "center",
        }
      }
    >
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={203}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-delete-audio"
      >
        <View
          accessibilityLabel="Cancel and delete recording"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        accessibilityLabel="Recording audio message"
        accessible={true}
        style={
          {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "center",
          }
        }
      >
        <Text
          style={
            {
              "backgroundColor": "transparent",
              "color": "#6C727A",
              "fontFamily": "Inter",
              "fontSize": 14,
              "fontWeight": "400",
              "textAlign": "left",
            }
          }
        >
          Recording audio message
        </Text>
      </View>
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={204}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "backgroundColor": "#156FF5",
              "borderRadius": 16,
              "height": 32,
              "justifyContent": "center",
              "opacity": 1,
              "width": 32,
            },
            {
              "cursor": undefined,
            },
          ]
        }
      >
        <View
          accessibilityLabel="Review message"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#FFFFFF",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
    </View>
  </View>,
  <View
    style={
      {
        "height": 0,
      }
    }
  />,
]
`;

exports[`MessageComposer Quote Add quote \`abc\` 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      [
        {
          "borderTopWidth": 1,
          "minHeight": 48,
          "paddingHorizontal": 16,
        },
        {
          "backgroundColor": "#FFFFFF",
          "borderTopColor": "#CBCED1",
        },
      ]
    }
    testID="message-composer"
  >
    <View
      style={
        {
          "flexDirection": "row",
        }
      }
    >
      <View
        style={
          {
            "height": 48,
            "justifyContent": "center",
            "paddingRight": 12,
          }
        }
      >
        <RNGestureHandlerButton
          activeOpacity={0.3}
          borderless={true}
          collapsable={false}
          delayLongPress={600}
          handlerTag={190}
          handlerType="NativeViewGestureHandler"
          hitSlop={
            {
              "bottom": 10,
              "left": 10,
              "right": 10,
              "top": 10,
            }
          }
          innerRef={null}
          onActiveStateChange={[Function]}
          onGestureHandlerEvent={[Function]}
          onGestureHandlerStateChange={[Function]}
          onPress={[Function]}
          style={
            [
              {
                "alignItems": "center",
                "height": 48,
                "justifyContent": "center",
                "opacity": 1,
                "width": 48,
              },
              {
                "cursor": undefined,
              },
            ]
          }
          testID="message-composer-actions"
        >
          <View
            accessibilityLabel="Actions"
            accessibilityRole="button"
            accessible={true}
          >
            <Text
              allowFontScaling={false}
              selectable={false}
              style={
                [
                  {
                    "color": "#2F343D",
                    "fontSize": NaN,
                  },
                  [
                    {
                      "lineHeight": NaN,
                    },
                    undefined,
                  ],
                  {
                    "fontFamily": "custom",
                    "fontStyle": "normal",
                    "fontWeight": "normal",
                  },
                  {},
                ]
              }
            >
              
            </Text>
          </View>
        </RNGestureHandlerButton>
      </View>
      <TextInput
        blurOnSubmit={false}
        defaultValue=""
        keyboardAppearance="light"
        multiline={true}
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSelectionChange={[Function]}
        placeholder="Message @Rocket Chat"
        placeholderTextColor="#9EA2A8"
        style={
          [
            {
              "backgroundColor": "transparent",
              "flex": 1,
              "fontFamily": "Inter",
              "fontSize": 16,
              "fontWeight": "400",
              "lineHeight": 22,
              "maxHeight": 200,
              "minHeight": 48,
              "paddingBottom": 12,
              "paddingTop": 12,
              "textAlign": "left",
              "textAlignVertical": "center",
            },
            {
              "color": "#2F343D",
            },
          ]
        }
        testID="message-composer-input"
        underlineColorAndroid="transparent"
      />
      <View
        style={
          {
            "alignItems": "center",
            "flexDirection": "row",
            "height": 48,
            "paddingLeft": 12,
          }
        }
      >
        <RNGestureHandlerButton
          activeOpacity={0.3}
          borderless={true}
          collapsable={false}
          delayLongPress={600}
          handlerTag={191}
          handlerType="NativeViewGestureHandler"
          hitSlop={
            {
              "bottom": 10,
              "left": 10,
              "right": 10,
              "top": 10,
            }
          }
          innerRef={null}
          onActiveStateChange={[Function]}
          onGestureHandlerEvent={[Function]}
          onGestureHandlerStateChange={[Function]}
          onPress={[Function]}
          style={
            [
              {
                "alignItems": "center",
                "height": 48,
                "justifyContent": "center",
                "opacity": 1,
                "width": 48,
              },
              {
                "cursor": undefined,
              },
            ]
          }
          testID="message-composer-send-audio"
        >
          <View
            accessibilityLabel="Record audio message"
            accessibilityRole="button"
            accessible={true}
          >
            <Text
              allowFontScaling={false}
              selectable={false}
              style={
                [
                  {
                    "color": "#2F343D",
                    "fontSize": NaN,
                  },
                  [
                    {
                      "lineHeight": NaN,
                    },
                    undefined,
                  ],
                  {
                    "fontFamily": "custom",
                    "fontStyle": "normal",
                    "fontWeight": "normal",
                  },
                  {},
                ]
              }
            >
              
            </Text>
          </View>
        </RNGestureHandlerButton>
      </View>
    </View>
    <RCTScrollView
      data={
        [
          "abc",
        ]
      }
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={true}
      keyExtractor={[Function]}
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={0.0001}
      stickyHeaderIndices={[]}
      viewabilityConfigCallbackPairs={[]}
    >
      <View>
        <View
          onFocusCapture={[Function]}
          onLayout={[Function]}
          style={
            [
              {
                "flexDirection": "row",
              },
              null,
            ]
          }
        >
          <View
            style={
              {
                "backgroundColor": "#F7F8FA",
                "borderBottomRightRadius": 4,
                "borderColor": "#EBECEF",
                "borderLeftColor": "#9EA2A8",
                "borderTopRightRadius": 4,
                "borderWidth": 1,
                "height": 64,
                "marginRight": 8,
                "padding": 8,
                "paddingLeft": 16,
                "width": 320,
              }
            }
            testID="composer-quote-abc"
          >
            <View
              style={
                {
                  "alignItems": "center",
                  "flexDirection": "row",
                }
              }
            >
              <View
                style={
                  {
                    "alignItems": "center",
                    "flex": 1,
                    "flexDirection": "row",
                  }
                }
              >
                <Text
                  numberOfLines={1}
                  style={
                    {
                      "backgroundColor": "transparent",
                      "color": "#1F2329",
                      "flexShrink": 1,
                      "fontFamily": "Inter",
                      "fontSize": 14,
                      "fontWeight": "700",
                      "lineHeight": 20,
                      "paddingRight": 4,
                      "textAlign": "left",
                    }
                  }
                />
                <Text
                  style={
                    {
                      "backgroundColor": "transparent",
                      "color": "#9EA2A8",
                      "fontFamily": "Inter",
                      "fontSize": 12,
                      "fontWeight": "400",
                      "lineHeight": 16,
                      "textAlign": "left",
                    }
                  }
                />
              </View>
              <RNGestureHandlerButton
                activeOpacity={0.3}
                borderless={true}
                collapsable={false}
                delayLongPress={600}
                handlerTag={192}
                handlerType="NativeViewGestureHandler"
                hitSlop={
                  {
                    "bottom": 10,
                    "left": 10,
                    "right": 10,
                    "top": 10,
                  }
                }
                innerRef={null}
                onActiveStateChange={[Function]}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                onPress={[Function]}
                style={
                  [
                    {
                      "alignItems": "center",
                      "height": 48,
                      "justifyContent": "center",
                      "opacity": 1,
                      "width": 48,
                    },
                    {
                      "cursor": undefined,
                    },
                  ]
                }
                testID="composer-quote-remove-abc"
              >
                <View
                  accessibilityLabel="Remove quote message"
                  accessibilityRole="button"
                  accessible={true}
                >
                  <Text
                    allowFontScaling={false}
                    selectable={false}
                    style={
                      [
                        {
                          "color": "#2F343D",
                          "fontSize": NaN,
                        },
                        [
                          {
                            "lineHeight": NaN,
                          },
                          undefined,
                        ],
                        {
                          "fontFamily": "custom",
                          "fontStyle": "normal",
                          "fontWeight": "normal",
                        },
                        {},
                      ]
                    }
                  >
                    
                  </Text>
                </View>
              </RNGestureHandlerButton>
            </View>
            <Text
              accessibilityLabel="Message abc"
              numberOfLines={1}
              style={
                [
                  {
                    "backgroundColor": "transparent",
                    "fontFamily": "Inter",
                    "fontSize": 16,
                    "fontWeight": "400",
                    "lineHeight": 22,
                    "textAlign": "left",
                  },
                  {
                    "color": "#2F343D",
                    "lineHeight": undefined,
                  },
                  {
                    "backgroundColor": "transparent",
                    "color": "#2F343D",
                    "fontFamily": "Inter",
                    "fontSize": 14,
                    "fontWeight": "400",
                    "lineHeight": 20,
                    "textAlign": "left",
                  },
                ]
              }
              testID="markdown-preview-Message abc"
            >
              Message abc
            </Text>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>,
  <View
    style={
      {
        "height": 0,
      }
    }
  />,
]
`;

exports[`MessageComposer Quote Add quote \`def\` 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      [
        {
          "borderTopWidth": 1,
          "minHeight": 48,
          "paddingHorizontal": 16,
        },
        {
          "backgroundColor": "#FFFFFF",
          "borderTopColor": "#CBCED1",
        },
      ]
    }
    testID="message-composer"
  >
    <View
      style={
        {
          "flexDirection": "row",
        }
      }
    >
      <View
        style={
          {
            "height": 48,
            "justifyContent": "center",
            "paddingRight": 12,
          }
        }
      >
        <RNGestureHandlerButton
          activeOpacity={0.3}
          borderless={true}
          collapsable={false}
          delayLongPress={600}
          handlerTag={193}
          handlerType="NativeViewGestureHandler"
          hitSlop={
            {
              "bottom": 10,
              "left": 10,
              "right": 10,
              "top": 10,
            }
          }
          innerRef={null}
          onActiveStateChange={[Function]}
          onGestureHandlerEvent={[Function]}
          onGestureHandlerStateChange={[Function]}
          onPress={[Function]}
          style={
            [
              {
                "alignItems": "center",
                "height": 48,
                "justifyContent": "center",
                "opacity": 1,
                "width": 48,
              },
              {
                "cursor": undefined,
              },
            ]
          }
          testID="message-composer-actions"
        >
          <View
            accessibilityLabel="Actions"
            accessibilityRole="button"
            accessible={true}
          >
            <Text
              allowFontScaling={false}
              selectable={false}
              style={
                [
                  {
                    "color": "#2F343D",
                    "fontSize": NaN,
                  },
                  [
                    {
                      "lineHeight": NaN,
                    },
                    undefined,
                  ],
                  {
                    "fontFamily": "custom",
                    "fontStyle": "normal",
                    "fontWeight": "normal",
                  },
                  {},
                ]
              }
            >
              
            </Text>
          </View>
        </RNGestureHandlerButton>
      </View>
      <TextInput
        blurOnSubmit={false}
        defaultValue=""
        keyboardAppearance="light"
        multiline={true}
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSelectionChange={[Function]}
        placeholder="Message @Rocket Chat"
        placeholderTextColor="#9EA2A8"
        style={
          [
            {
              "backgroundColor": "transparent",
              "flex": 1,
              "fontFamily": "Inter",
              "fontSize": 16,
              "fontWeight": "400",
              "lineHeight": 22,
              "maxHeight": 200,
              "minHeight": 48,
              "paddingBottom": 12,
              "paddingTop": 12,
              "textAlign": "left",
              "textAlignVertical": "center",
            },
            {
              "color": "#2F343D",
            },
          ]
        }
        testID="message-composer-input"
        underlineColorAndroid="transparent"
      />
      <View
        style={
          {
            "alignItems": "center",
            "flexDirection": "row",
            "height": 48,
            "paddingLeft": 12,
          }
        }
      >
        <RNGestureHandlerButton
          activeOpacity={0.3}
          borderless={true}
          collapsable={false}
          delayLongPress={600}
          handlerTag={194}
          handlerType="NativeViewGestureHandler"
          hitSlop={
            {
              "bottom": 10,
              "left": 10,
              "right": 10,
              "top": 10,
            }
          }
          innerRef={null}
          onActiveStateChange={[Function]}
          onGestureHandlerEvent={[Function]}
          onGestureHandlerStateChange={[Function]}
          onPress={[Function]}
          style={
            [
              {
                "alignItems": "center",
                "height": 48,
                "justifyContent": "center",
                "opacity": 1,
                "width": 48,
              },
              {
                "cursor": undefined,
              },
            ]
          }
          testID="message-composer-send-audio"
        >
          <View
            accessibilityLabel="Record audio message"
            accessibilityRole="button"
            accessible={true}
          >
            <Text
              allowFontScaling={false}
              selectable={false}
              style={
                [
                  {
                    "color": "#2F343D",
                    "fontSize": NaN,
                  },
                  [
                    {
                      "lineHeight": NaN,
                    },
                    undefined,
                  ],
                  {
                    "fontFamily": "custom",
                    "fontStyle": "normal",
                    "fontWeight": "normal",
                  },
                  {},
                ]
              }
            >
              
            </Text>
          </View>
        </RNGestureHandlerButton>
      </View>
    </View>
    <RCTScrollView
      data={
        [
          "abc",
          "def",
        ]
      }
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={true}
      keyExtractor={[Function]}
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={0.0001}
      stickyHeaderIndices={[]}
      viewabilityConfigCallbackPairs={[]}
    >
      <View>
        <View
          onFocusCapture={[Function]}
          onLayout={[Function]}
          style={
            [
              {
                "flexDirection": "row",
              },
              null,
            ]
          }
        >
          <View
            style={
              {
                "backgroundColor": "#F7F8FA",
                "borderBottomRightRadius": 4,
                "borderColor": "#EBECEF",
                "borderLeftColor": "#9EA2A8",
                "borderTopRightRadius": 4,
                "borderWidth": 1,
                "height": 64,
                "marginRight": 8,
                "padding": 8,
                "paddingLeft": 16,
                "width": 320,
              }
            }
            testID="composer-quote-abc"
          >
            <View
              style={
                {
                  "alignItems": "center",
                  "flexDirection": "row",
                }
              }
            >
              <View
                style={
                  {
                    "alignItems": "center",
                    "flex": 1,
                    "flexDirection": "row",
                  }
                }
              >
                <Text
                  numberOfLines={1}
                  style={
                    {
                      "backgroundColor": "transparent",
                      "color": "#1F2329",
                      "flexShrink": 1,
                      "fontFamily": "Inter",
                      "fontSize": 14,
                      "fontWeight": "700",
                      "lineHeight": 20,
                      "paddingRight": 4,
                      "textAlign": "left",
                    }
                  }
                />
                <Text
                  style={
                    {
                      "backgroundColor": "transparent",
                      "color": "#9EA2A8",
                      "fontFamily": "Inter",
                      "fontSize": 12,
                      "fontWeight": "400",
                      "lineHeight": 16,
                      "textAlign": "left",
                    }
                  }
                />
              </View>
              <RNGestureHandlerButton
                activeOpacity={0.3}
                borderless={true}
                collapsable={false}
                delayLongPress={600}
                handlerTag={195}
                handlerType="NativeViewGestureHandler"
                hitSlop={
                  {
                    "bottom": 10,
                    "left": 10,
                    "right": 10,
                    "top": 10,
                  }
                }
                innerRef={null}
                onActiveStateChange={[Function]}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                onPress={[Function]}
                style={
                  [
                    {
                      "alignItems": "center",
                      "height": 48,
                      "justifyContent": "center",
                      "opacity": 1,
                      "width": 48,
                    },
                    {
                      "cursor": undefined,
                    },
                  ]
                }
                testID="composer-quote-remove-abc"
              >
                <View
                  accessibilityLabel="Remove quote message"
                  accessibilityRole="button"
                  accessible={true}
                >
                  <Text
                    allowFontScaling={false}
                    selectable={false}
                    style={
                      [
                        {
                          "color": "#2F343D",
                          "fontSize": NaN,
                        },
                        [
                          {
                            "lineHeight": NaN,
                          },
                          undefined,
                        ],
                        {
                          "fontFamily": "custom",
                          "fontStyle": "normal",
                          "fontWeight": "normal",
                        },
                        {},
                      ]
                    }
                  >
                    
                  </Text>
                </View>
              </RNGestureHandlerButton>
            </View>
            <Text
              accessibilityLabel="Message abc"
              numberOfLines={1}
              style={
                [
                  {
                    "backgroundColor": "transparent",
                    "fontFamily": "Inter",
                    "fontSize": 16,
                    "fontWeight": "400",
                    "lineHeight": 22,
                    "textAlign": "left",
                  },
                  {
                    "color": "#2F343D",
                    "lineHeight": undefined,
                  },
                  {
                    "backgroundColor": "transparent",
                    "color": "#2F343D",
                    "fontFamily": "Inter",
                    "fontSize": 14,
                    "fontWeight": "400",
                    "lineHeight": 20,
                    "textAlign": "left",
                  },
                ]
              }
              testID="markdown-preview-Message abc"
            >
              Message abc
            </Text>
          </View>
        </View>
        <View
          onFocusCapture={[Function]}
          onLayout={[Function]}
          style={
            [
              {
                "flexDirection": "row",
              },
              null,
            ]
          }
        >
          <View
            style={
              {
                "backgroundColor": "#F7F8FA",
                "borderBottomRightRadius": 4,
                "borderColor": "#EBECEF",
                "borderLeftColor": "#9EA2A8",
                "borderTopRightRadius": 4,
                "borderWidth": 1,
                "height": 64,
                "marginRight": 8,
                "padding": 8,
                "paddingLeft": 16,
                "width": 320,
              }
            }
            testID="composer-quote-def"
          >
            <View
              style={
                {
                  "alignItems": "center",
                  "flexDirection": "row",
                }
              }
            >
              <View
                style={
                  {
                    "alignItems": "center",
                    "flex": 1,
                    "flexDirection": "row",
                  }
                }
              >
                <Text
                  numberOfLines={1}
                  style={
                    {
                      "backgroundColor": "transparent",
                      "color": "#1F2329",
                      "flexShrink": 1,
                      "fontFamily": "Inter",
                      "fontSize": 14,
                      "fontWeight": "700",
                      "lineHeight": 20,
                      "paddingRight": 4,
                      "textAlign": "left",
                    }
                  }
                />
                <Text
                  style={
                    {
                      "backgroundColor": "transparent",
                      "color": "#9EA2A8",
                      "fontFamily": "Inter",
                      "fontSize": 12,
                      "fontWeight": "400",
                      "lineHeight": 16,
                      "textAlign": "left",
                    }
                  }
                />
              </View>
              <RNGestureHandlerButton
                activeOpacity={0.3}
                borderless={true}
                collapsable={false}
                delayLongPress={600}
                handlerTag={196}
                handlerType="NativeViewGestureHandler"
                hitSlop={
                  {
                    "bottom": 10,
                    "left": 10,
                    "right": 10,
                    "top": 10,
                  }
                }
                innerRef={null}
                onActiveStateChange={[Function]}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                onPress={[Function]}
                style={
                  [
                    {
                      "alignItems": "center",
                      "height": 48,
                      "justifyContent": "center",
                      "opacity": 1,
                      "width": 48,
                    },
                    {
                      "cursor": undefined,
                    },
                  ]
                }
                testID="composer-quote-remove-def"
              >
                <View
                  accessibilityLabel="Remove quote message"
                  accessibilityRole="button"
                  accessible={true}
                >
                  <Text
                    allowFontScaling={false}
                    selectable={false}
                    style={
                      [
                        {
                          "color": "#2F343D",
                          "fontSize": NaN,
                        },
                        [
                          {
                            "lineHeight": NaN,
                          },
                          undefined,
                        ],
                        {
                          "fontFamily": "custom",
                          "fontStyle": "normal",
                          "fontWeight": "normal",
                        },
                        {},
                      ]
                    }
                  >
                    
                  </Text>
                </View>
              </RNGestureHandlerButton>
            </View>
            <Text
              accessibilityLabel="Message def"
              numberOfLines={1}
              style={
                [
                  {
                    "backgroundColor": "transparent",
                    "fontFamily": "Inter",
                    "fontSize": 16,
                    "fontWeight": "400",
                    "lineHeight": 22,
                    "textAlign": "left",
                  },
                  {
                    "color": "#2F343D",
                    "lineHeight": undefined,
                  },
                  {
                    "backgroundColor": "transparent",
                    "color": "#2F343D",
                    "fontFamily": "Inter",
                    "fontSize": 14,
                    "fontWeight": "400",
                    "lineHeight": 20,
                    "textAlign": "left",
                  },
                ]
              }
              testID="markdown-preview-Message def"
            >
              Message def
            </Text>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>,
  <View
    style={
      {
        "height": 0,
      }
    }
  />,
]
`;

exports[`MessageComposer Quote Remove a quote 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      [
        {
          "borderTopWidth": 1,
          "minHeight": 48,
          "paddingHorizontal": 16,
        },
        {
          "backgroundColor": "#FFFFFF",
          "borderTopColor": "#CBCED1",
        },
      ]
    }
    testID="message-composer"
  >
    <View
      style={
        {
          "flexDirection": "row",
        }
      }
    >
      <View
        style={
          {
            "height": 48,
            "justifyContent": "center",
            "paddingRight": 12,
          }
        }
      >
        <RNGestureHandlerButton
          activeOpacity={0.3}
          borderless={true}
          collapsable={false}
          delayLongPress={600}
          handlerTag={197}
          handlerType="NativeViewGestureHandler"
          hitSlop={
            {
              "bottom": 10,
              "left": 10,
              "right": 10,
              "top": 10,
            }
          }
          innerRef={null}
          onActiveStateChange={[Function]}
          onGestureHandlerEvent={[Function]}
          onGestureHandlerStateChange={[Function]}
          onPress={[Function]}
          style={
            [
              {
                "alignItems": "center",
                "height": 48,
                "justifyContent": "center",
                "opacity": 1,
                "width": 48,
              },
              {
                "cursor": undefined,
              },
            ]
          }
          testID="message-composer-actions"
        >
          <View
            accessibilityLabel="Actions"
            accessibilityRole="button"
            accessible={true}
          >
            <Text
              allowFontScaling={false}
              selectable={false}
              style={
                [
                  {
                    "color": "#2F343D",
                    "fontSize": NaN,
                  },
                  [
                    {
                      "lineHeight": NaN,
                    },
                    undefined,
                  ],
                  {
                    "fontFamily": "custom",
                    "fontStyle": "normal",
                    "fontWeight": "normal",
                  },
                  {},
                ]
              }
            >
              
            </Text>
          </View>
        </RNGestureHandlerButton>
      </View>
      <TextInput
        blurOnSubmit={false}
        defaultValue=""
        keyboardAppearance="light"
        multiline={true}
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSelectionChange={[Function]}
        placeholder="Message @Rocket Chat"
        placeholderTextColor="#9EA2A8"
        style={
          [
            {
              "backgroundColor": "transparent",
              "flex": 1,
              "fontFamily": "Inter",
              "fontSize": 16,
              "fontWeight": "400",
              "lineHeight": 22,
              "maxHeight": 200,
              "minHeight": 48,
              "paddingBottom": 12,
              "paddingTop": 12,
              "textAlign": "left",
              "textAlignVertical": "center",
            },
            {
              "color": "#2F343D",
            },
          ]
        }
        testID="message-composer-input"
        underlineColorAndroid="transparent"
      />
      <View
        style={
          {
            "alignItems": "center",
            "flexDirection": "row",
            "height": 48,
            "paddingLeft": 12,
          }
        }
      >
        <RNGestureHandlerButton
          activeOpacity={0.3}
          borderless={true}
          collapsable={false}
          delayLongPress={600}
          handlerTag={198}
          handlerType="NativeViewGestureHandler"
          hitSlop={
            {
              "bottom": 10,
              "left": 10,
              "right": 10,
              "top": 10,
            }
          }
          innerRef={null}
          onActiveStateChange={[Function]}
          onGestureHandlerEvent={[Function]}
          onGestureHandlerStateChange={[Function]}
          onPress={[Function]}
          style={
            [
              {
                "alignItems": "center",
                "height": 48,
                "justifyContent": "center",
                "opacity": 1,
                "width": 48,
              },
              {
                "cursor": undefined,
              },
            ]
          }
          testID="message-composer-send-audio"
        >
          <View
            accessibilityLabel="Record audio message"
            accessibilityRole="button"
            accessible={true}
          >
            <Text
              allowFontScaling={false}
              selectable={false}
              style={
                [
                  {
                    "color": "#2F343D",
                    "fontSize": NaN,
                  },
                  [
                    {
                      "lineHeight": NaN,
                    },
                    undefined,
                  ],
                  {
                    "fontFamily": "custom",
                    "fontStyle": "normal",
                    "fontWeight": "normal",
                  },
                  {},
                ]
              }
            >
              
            </Text>
          </View>
        </RNGestureHandlerButton>
      </View>
    </View>
    <RCTScrollView
      data={
        [
          "abc",
          "def",
        ]
      }
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={true}
      keyExtractor={[Function]}
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={0.0001}
      stickyHeaderIndices={[]}
      viewabilityConfigCallbackPairs={[]}
    >
      <View>
        <View
          onFocusCapture={[Function]}
          onLayout={[Function]}
          style={
            [
              {
                "flexDirection": "row",
              },
              null,
            ]
          }
        >
          <View
            style={
              {
                "backgroundColor": "#F7F8FA",
                "borderBottomRightRadius": 4,
                "borderColor": "#EBECEF",
                "borderLeftColor": "#9EA2A8",
                "borderTopRightRadius": 4,
                "borderWidth": 1,
                "height": 64,
                "marginRight": 8,
                "padding": 8,
                "paddingLeft": 16,
                "width": 320,
              }
            }
            testID="composer-quote-abc"
          >
            <View
              style={
                {
                  "alignItems": "center",
                  "flexDirection": "row",
                }
              }
            >
              <View
                style={
                  {
                    "alignItems": "center",
                    "flex": 1,
                    "flexDirection": "row",
                  }
                }
              >
                <Text
                  numberOfLines={1}
                  style={
                    {
                      "backgroundColor": "transparent",
                      "color": "#1F2329",
                      "flexShrink": 1,
                      "fontFamily": "Inter",
                      "fontSize": 14,
                      "fontWeight": "700",
                      "lineHeight": 20,
                      "paddingRight": 4,
                      "textAlign": "left",
                    }
                  }
                />
                <Text
                  style={
                    {
                      "backgroundColor": "transparent",
                      "color": "#9EA2A8",
                      "fontFamily": "Inter",
                      "fontSize": 12,
                      "fontWeight": "400",
                      "lineHeight": 16,
                      "textAlign": "left",
                    }
                  }
                />
              </View>
              <RNGestureHandlerButton
                activeOpacity={0.3}
                borderless={true}
                collapsable={false}
                delayLongPress={600}
                handlerTag={199}
                handlerType="NativeViewGestureHandler"
                hitSlop={
                  {
                    "bottom": 10,
                    "left": 10,
                    "right": 10,
                    "top": 10,
                  }
                }
                innerRef={null}
                onActiveStateChange={[Function]}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                onPress={[Function]}
                style={
                  [
                    {
                      "alignItems": "center",
                      "height": 48,
                      "justifyContent": "center",
                      "opacity": 1,
                      "width": 48,
                    },
                    {
                      "cursor": undefined,
                    },
                  ]
                }
                testID="composer-quote-remove-abc"
              >
                <View
                  accessibilityLabel="Remove quote message"
                  accessibilityRole="button"
                  accessible={true}
                >
                  <Text
                    allowFontScaling={false}
                    selectable={false}
                    style={
                      [
                        {
                          "color": "#2F343D",
                          "fontSize": NaN,
                        },
                        [
                          {
                            "lineHeight": NaN,
                          },
                          undefined,
                        ],
                        {
                          "fontFamily": "custom",
                          "fontStyle": "normal",
                          "fontWeight": "normal",
                        },
                        {},
                      ]
                    }
                  >
                    
                  </Text>
                </View>
              </RNGestureHandlerButton>
            </View>
            <Text
              accessibilityLabel="Message abc"
              numberOfLines={1}
              style={
                [
                  {
                    "backgroundColor": "transparent",
                    "fontFamily": "Inter",
                    "fontSize": 16,
                    "fontWeight": "400",
                    "lineHeight": 22,
                    "textAlign": "left",
                  },
                  {
                    "color": "#2F343D",
                    "lineHeight": undefined,
                  },
                  {
                    "backgroundColor": "transparent",
                    "color": "#2F343D",
                    "fontFamily": "Inter",
                    "fontSize": 14,
                    "fontWeight": "400",
                    "lineHeight": 20,
                    "textAlign": "left",
                  },
                ]
              }
              testID="markdown-preview-Message abc"
            >
              Message abc
            </Text>
          </View>
        </View>
        <View
          onFocusCapture={[Function]}
          onLayout={[Function]}
          style={
            [
              {
                "flexDirection": "row",
              },
              null,
            ]
          }
        >
          <View
            style={
              {
                "backgroundColor": "#F7F8FA",
                "borderBottomRightRadius": 4,
                "borderColor": "#EBECEF",
                "borderLeftColor": "#9EA2A8",
                "borderTopRightRadius": 4,
                "borderWidth": 1,
                "height": 64,
                "marginRight": 8,
                "padding": 8,
                "paddingLeft": 16,
                "width": 320,
              }
            }
            testID="composer-quote-def"
          >
            <View
              style={
                {
                  "alignItems": "center",
                  "flexDirection": "row",
                }
              }
            >
              <View
                style={
                  {
                    "alignItems": "center",
                    "flex": 1,
                    "flexDirection": "row",
                  }
                }
              >
                <Text
                  numberOfLines={1}
                  style={
                    {
                      "backgroundColor": "transparent",
                      "color": "#1F2329",
                      "flexShrink": 1,
                      "fontFamily": "Inter",
                      "fontSize": 14,
                      "fontWeight": "700",
                      "lineHeight": 20,
                      "paddingRight": 4,
                      "textAlign": "left",
                    }
                  }
                />
                <Text
                  style={
                    {
                      "backgroundColor": "transparent",
                      "color": "#9EA2A8",
                      "fontFamily": "Inter",
                      "fontSize": 12,
                      "fontWeight": "400",
                      "lineHeight": 16,
                      "textAlign": "left",
                    }
                  }
                />
              </View>
              <RNGestureHandlerButton
                activeOpacity={0.3}
                borderless={true}
                collapsable={false}
                delayLongPress={600}
                handlerTag={200}
                handlerType="NativeViewGestureHandler"
                hitSlop={
                  {
                    "bottom": 10,
                    "left": 10,
                    "right": 10,
                    "top": 10,
                  }
                }
                innerRef={null}
                onActiveStateChange={[Function]}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                onPress={[Function]}
                style={
                  [
                    {
                      "alignItems": "center",
                      "height": 48,
                      "justifyContent": "center",
                      "opacity": 1,
                      "width": 48,
                    },
                    {
                      "cursor": undefined,
                    },
                  ]
                }
                testID="composer-quote-remove-def"
              >
                <View
                  accessibilityLabel="Remove quote message"
                  accessibilityRole="button"
                  accessible={true}
                >
                  <Text
                    allowFontScaling={false}
                    selectable={false}
                    style={
                      [
                        {
                          "color": "#2F343D",
                          "fontSize": NaN,
                        },
                        [
                          {
                            "lineHeight": NaN,
                          },
                          undefined,
                        ],
                        {
                          "fontFamily": "custom",
                          "fontStyle": "normal",
                          "fontWeight": "normal",
                        },
                        {},
                      ]
                    }
                  >
                    
                  </Text>
                </View>
              </RNGestureHandlerButton>
            </View>
            <Text
              accessibilityLabel="Message def"
              numberOfLines={1}
              style={
                [
                  {
                    "backgroundColor": "transparent",
                    "fontFamily": "Inter",
                    "fontSize": 16,
                    "fontWeight": "400",
                    "lineHeight": 22,
                    "textAlign": "left",
                  },
                  {
                    "color": "#2F343D",
                    "lineHeight": undefined,
                  },
                  {
                    "backgroundColor": "transparent",
                    "color": "#2F343D",
                    "fontFamily": "Inter",
                    "fontSize": 14,
                    "fontWeight": "400",
                    "lineHeight": 20,
                    "textAlign": "left",
                  },
                ]
              }
              testID="markdown-preview-Message def"
            >
              Message def
            </Text>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>,
  <View
    style={
      {
        "height": 0,
      }
    }
  />,
]
`;

exports[`MessageComposer Toolbar Markdown tap bold 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      [
        {
          "borderTopWidth": 1,
          "minHeight": 48,
          "paddingHorizontal": 16,
        },
        {
          "backgroundColor": "#FFFFFF",
          "borderTopColor": "#CBCED1",
        },
      ]
    }
    testID="message-composer"
  >
    <View
      style={
        {
          "flexDirection": "row",
        }
      }
    >
      <TextInput
        blurOnSubmit={false}
        defaultValue=""
        keyboardAppearance="light"
        multiline={true}
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSelectionChange={[Function]}
        placeholder="Message @Rocket Chat"
        placeholderTextColor="#9EA2A8"
        style={
          [
            {
              "backgroundColor": "transparent",
              "flex": 1,
              "fontFamily": "Inter",
              "fontSize": 16,
              "fontWeight": "400",
              "lineHeight": 22,
              "maxHeight": 200,
              "minHeight": 48,
              "paddingBottom": 12,
              "paddingTop": 12,
              "textAlign": "left",
              "textAlignVertical": "center",
            },
            {
              "color": "#2F343D",
            },
          ]
        }
        testID="message-composer-input"
        underlineColorAndroid="transparent"
      />
    </View>
    <View
      style={
        {
          "flexDirection": "row",
          "paddingVertical": 12,
        }
      }
    >
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={49}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-close-markdown"
      >
        <View
          accessibilityLabel="Close"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={50}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-bold"
      >
        <View
          accessibilityLabel="Bold"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={51}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-italic"
      >
        <View
          accessibilityLabel="Italic"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={52}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-strike"
      >
        <View
          accessibilityLabel="Strikethrough"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={53}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code"
      >
        <View
          accessibilityLabel="Inline code"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={54}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code-block"
      >
        <View
          accessibilityLabel="Code block"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "flex": 1,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={48}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-send-audio"
      >
        <View
          accessibilityLabel="Record audio message"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
    </View>
  </View>,
  <View
    style={
      {
        "height": 0,
      }
    }
  />,
]
`;

exports[`MessageComposer Toolbar Markdown tap code 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      [
        {
          "borderTopWidth": 1,
          "minHeight": 48,
          "paddingHorizontal": 16,
        },
        {
          "backgroundColor": "#FFFFFF",
          "borderTopColor": "#CBCED1",
        },
      ]
    }
    testID="message-composer"
  >
    <View
      style={
        {
          "flexDirection": "row",
        }
      }
    >
      <TextInput
        blurOnSubmit={false}
        defaultValue=""
        keyboardAppearance="light"
        multiline={true}
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSelectionChange={[Function]}
        placeholder="Message @Rocket Chat"
        placeholderTextColor="#9EA2A8"
        style={
          [
            {
              "backgroundColor": "transparent",
              "flex": 1,
              "fontFamily": "Inter",
              "fontSize": 16,
              "fontWeight": "400",
              "lineHeight": 22,
              "maxHeight": 200,
              "minHeight": 48,
              "paddingBottom": 12,
              "paddingTop": 12,
              "textAlign": "left",
              "textAlignVertical": "center",
            },
            {
              "color": "#2F343D",
            },
          ]
        }
        testID="message-composer-input"
        underlineColorAndroid="transparent"
      />
    </View>
    <View
      style={
        {
          "flexDirection": "row",
          "paddingVertical": 12,
        }
      }
    >
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={127}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-close-markdown"
      >
        <View
          accessibilityLabel="Close"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={128}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-bold"
      >
        <View
          accessibilityLabel="Bold"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={129}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-italic"
      >
        <View
          accessibilityLabel="Italic"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={130}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-strike"
      >
        <View
          accessibilityLabel="Strikethrough"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={131}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code"
      >
        <View
          accessibilityLabel="Inline code"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={132}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code-block"
      >
        <View
          accessibilityLabel="Code block"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "flex": 1,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={126}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-send-audio"
      >
        <View
          accessibilityLabel="Record audio message"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
    </View>
  </View>,
  <View
    style={
      {
        "height": 0,
      }
    }
  />,
]
`;

exports[`MessageComposer Toolbar Markdown tap code-block 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      [
        {
          "borderTopWidth": 1,
          "minHeight": 48,
          "paddingHorizontal": 16,
        },
        {
          "backgroundColor": "#FFFFFF",
          "borderTopColor": "#CBCED1",
        },
      ]
    }
    testID="message-composer"
  >
    <View
      style={
        {
          "flexDirection": "row",
        }
      }
    >
      <TextInput
        blurOnSubmit={false}
        defaultValue=""
        keyboardAppearance="light"
        multiline={true}
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSelectionChange={[Function]}
        placeholder="Message @Rocket Chat"
        placeholderTextColor="#9EA2A8"
        style={
          [
            {
              "backgroundColor": "transparent",
              "flex": 1,
              "fontFamily": "Inter",
              "fontSize": 16,
              "fontWeight": "400",
              "lineHeight": 22,
              "maxHeight": 200,
              "minHeight": 48,
              "paddingBottom": 12,
              "paddingTop": 12,
              "textAlign": "left",
              "textAlignVertical": "center",
            },
            {
              "color": "#2F343D",
            },
          ]
        }
        testID="message-composer-input"
        underlineColorAndroid="transparent"
      />
    </View>
    <View
      style={
        {
          "flexDirection": "row",
          "paddingVertical": 12,
        }
      }
    >
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={153}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-close-markdown"
      >
        <View
          accessibilityLabel="Close"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={154}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-bold"
      >
        <View
          accessibilityLabel="Bold"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={155}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-italic"
      >
        <View
          accessibilityLabel="Italic"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={156}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-strike"
      >
        <View
          accessibilityLabel="Strikethrough"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={157}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code"
      >
        <View
          accessibilityLabel="Inline code"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={158}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code-block"
      >
        <View
          accessibilityLabel="Code block"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "flex": 1,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={152}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-send-audio"
      >
        <View
          accessibilityLabel="Record audio message"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
    </View>
  </View>,
  <View
    style={
      {
        "height": 0,
      }
    }
  />,
]
`;

exports[`MessageComposer Toolbar Markdown tap italic 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      [
        {
          "borderTopWidth": 1,
          "minHeight": 48,
          "paddingHorizontal": 16,
        },
        {
          "backgroundColor": "#FFFFFF",
          "borderTopColor": "#CBCED1",
        },
      ]
    }
    testID="message-composer"
  >
    <View
      style={
        {
          "flexDirection": "row",
        }
      }
    >
      <TextInput
        blurOnSubmit={false}
        defaultValue=""
        keyboardAppearance="light"
        multiline={true}
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSelectionChange={[Function]}
        placeholder="Message @Rocket Chat"
        placeholderTextColor="#9EA2A8"
        style={
          [
            {
              "backgroundColor": "transparent",
              "flex": 1,
              "fontFamily": "Inter",
              "fontSize": 16,
              "fontWeight": "400",
              "lineHeight": 22,
              "maxHeight": 200,
              "minHeight": 48,
              "paddingBottom": 12,
              "paddingTop": 12,
              "textAlign": "left",
              "textAlignVertical": "center",
            },
            {
              "color": "#2F343D",
            },
          ]
        }
        testID="message-composer-input"
        underlineColorAndroid="transparent"
      />
    </View>
    <View
      style={
        {
          "flexDirection": "row",
          "paddingVertical": 12,
        }
      }
    >
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={75}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-close-markdown"
      >
        <View
          accessibilityLabel="Close"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={76}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-bold"
      >
        <View
          accessibilityLabel="Bold"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={77}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-italic"
      >
        <View
          accessibilityLabel="Italic"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={78}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-strike"
      >
        <View
          accessibilityLabel="Strikethrough"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={79}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code"
      >
        <View
          accessibilityLabel="Inline code"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={80}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code-block"
      >
        <View
          accessibilityLabel="Code block"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "flex": 1,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={74}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-send-audio"
      >
        <View
          accessibilityLabel="Record audio message"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
    </View>
  </View>,
  <View
    style={
      {
        "height": 0,
      }
    }
  />,
]
`;

exports[`MessageComposer Toolbar Markdown tap markdown 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      [
        {
          "borderTopWidth": 1,
          "minHeight": 48,
          "paddingHorizontal": 16,
        },
        {
          "backgroundColor": "#FFFFFF",
          "borderTopColor": "#CBCED1",
        },
      ]
    }
    testID="message-composer"
  >
    <View
      style={
        {
          "flexDirection": "row",
        }
      }
    >
      <TextInput
        blurOnSubmit={false}
        defaultValue=""
        keyboardAppearance="light"
        multiline={true}
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSelectionChange={[Function]}
        placeholder="Message @Rocket Chat"
        placeholderTextColor="#9EA2A8"
        style={
          [
            {
              "backgroundColor": "transparent",
              "flex": 1,
              "fontFamily": "Inter",
              "fontSize": 16,
              "fontWeight": "400",
              "lineHeight": 22,
              "maxHeight": 200,
              "minHeight": 48,
              "paddingBottom": 12,
              "paddingTop": 12,
              "textAlign": "left",
              "textAlignVertical": "center",
            },
            {
              "color": "#2F343D",
            },
          ]
        }
        testID="message-composer-input"
        underlineColorAndroid="transparent"
      />
    </View>
    <View
      style={
        {
          "flexDirection": "row",
          "paddingVertical": 12,
        }
      }
    >
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={36}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-close-markdown"
      >
        <View
          accessibilityLabel="Close"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={37}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-bold"
      >
        <View
          accessibilityLabel="Bold"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={38}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-italic"
      >
        <View
          accessibilityLabel="Italic"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={39}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-strike"
      >
        <View
          accessibilityLabel="Strikethrough"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={40}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code"
      >
        <View
          accessibilityLabel="Inline code"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={41}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code-block"
      >
        <View
          accessibilityLabel="Code block"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "flex": 1,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={35}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-send-audio"
      >
        <View
          accessibilityLabel="Record audio message"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
    </View>
  </View>,
  <View
    style={
      {
        "height": 0,
      }
    }
  />,
]
`;

exports[`MessageComposer Toolbar Markdown tap strike 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      [
        {
          "borderTopWidth": 1,
          "minHeight": 48,
          "paddingHorizontal": 16,
        },
        {
          "backgroundColor": "#FFFFFF",
          "borderTopColor": "#CBCED1",
        },
      ]
    }
    testID="message-composer"
  >
    <View
      style={
        {
          "flexDirection": "row",
        }
      }
    >
      <TextInput
        blurOnSubmit={false}
        defaultValue=""
        keyboardAppearance="light"
        multiline={true}
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSelectionChange={[Function]}
        placeholder="Message @Rocket Chat"
        placeholderTextColor="#9EA2A8"
        style={
          [
            {
              "backgroundColor": "transparent",
              "flex": 1,
              "fontFamily": "Inter",
              "fontSize": 16,
              "fontWeight": "400",
              "lineHeight": 22,
              "maxHeight": 200,
              "minHeight": 48,
              "paddingBottom": 12,
              "paddingTop": 12,
              "textAlign": "left",
              "textAlignVertical": "center",
            },
            {
              "color": "#2F343D",
            },
          ]
        }
        testID="message-composer-input"
        underlineColorAndroid="transparent"
      />
    </View>
    <View
      style={
        {
          "flexDirection": "row",
          "paddingVertical": 12,
        }
      }
    >
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={101}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-close-markdown"
      >
        <View
          accessibilityLabel="Close"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={102}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-bold"
      >
        <View
          accessibilityLabel="Bold"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={103}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-italic"
      >
        <View
          accessibilityLabel="Italic"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={104}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-strike"
      >
        <View
          accessibilityLabel="Strikethrough"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={105}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code"
      >
        <View
          accessibilityLabel="Inline code"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={106}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code-block"
      >
        <View
          accessibilityLabel="Code block"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "flex": 1,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={100}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-send-audio"
      >
        <View
          accessibilityLabel="Record audio message"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
    </View>
  </View>,
  <View
    style={
      {
        "height": 0,
      }
    }
  />,
]
`;

exports[`MessageComposer Toolbar Markdown type test and tap bold 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      [
        {
          "borderTopWidth": 1,
          "minHeight": 48,
          "paddingHorizontal": 16,
        },
        {
          "backgroundColor": "#FFFFFF",
          "borderTopColor": "#CBCED1",
        },
      ]
    }
    testID="message-composer"
  >
    <View
      style={
        {
          "flexDirection": "row",
        }
      }
    >
      <TextInput
        blurOnSubmit={false}
        defaultValue=""
        keyboardAppearance="light"
        multiline={true}
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSelectionChange={[Function]}
        placeholder="Message @Rocket Chat"
        placeholderTextColor="#9EA2A8"
        style={
          [
            {
              "backgroundColor": "transparent",
              "flex": 1,
              "fontFamily": "Inter",
              "fontSize": 16,
              "fontWeight": "400",
              "lineHeight": 22,
              "maxHeight": 200,
              "minHeight": 48,
              "paddingBottom": 12,
              "paddingTop": 12,
              "textAlign": "left",
              "textAlignVertical": "center",
            },
            {
              "color": "#2F343D",
            },
          ]
        }
        testID="message-composer-input"
        underlineColorAndroid="transparent"
      />
    </View>
    <View
      style={
        {
          "flexDirection": "row",
          "paddingVertical": 12,
        }
      }
    >
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={62}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-close-markdown"
      >
        <View
          accessibilityLabel="Close"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={63}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-bold"
      >
        <View
          accessibilityLabel="Bold"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={64}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-italic"
      >
        <View
          accessibilityLabel="Italic"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={65}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-strike"
      >
        <View
          accessibilityLabel="Strikethrough"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={66}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code"
      >
        <View
          accessibilityLabel="Inline code"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={67}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code-block"
      >
        <View
          accessibilityLabel="Code block"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "flex": 1,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={61}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-send-audio"
      >
        <View
          accessibilityLabel="Record audio message"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
    </View>
  </View>,
  <View
    style={
      {
        "height": 0,
      }
    }
  />,
]
`;

exports[`MessageComposer Toolbar Markdown type test and tap code 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      [
        {
          "borderTopWidth": 1,
          "minHeight": 48,
          "paddingHorizontal": 16,
        },
        {
          "backgroundColor": "#FFFFFF",
          "borderTopColor": "#CBCED1",
        },
      ]
    }
    testID="message-composer"
  >
    <View
      style={
        {
          "flexDirection": "row",
        }
      }
    >
      <TextInput
        blurOnSubmit={false}
        defaultValue=""
        keyboardAppearance="light"
        multiline={true}
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSelectionChange={[Function]}
        placeholder="Message @Rocket Chat"
        placeholderTextColor="#9EA2A8"
        style={
          [
            {
              "backgroundColor": "transparent",
              "flex": 1,
              "fontFamily": "Inter",
              "fontSize": 16,
              "fontWeight": "400",
              "lineHeight": 22,
              "maxHeight": 200,
              "minHeight": 48,
              "paddingBottom": 12,
              "paddingTop": 12,
              "textAlign": "left",
              "textAlignVertical": "center",
            },
            {
              "color": "#2F343D",
            },
          ]
        }
        testID="message-composer-input"
        underlineColorAndroid="transparent"
      />
    </View>
    <View
      style={
        {
          "flexDirection": "row",
          "paddingVertical": 12,
        }
      }
    >
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={140}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-close-markdown"
      >
        <View
          accessibilityLabel="Close"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={141}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-bold"
      >
        <View
          accessibilityLabel="Bold"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={142}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-italic"
      >
        <View
          accessibilityLabel="Italic"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={143}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-strike"
      >
        <View
          accessibilityLabel="Strikethrough"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={144}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code"
      >
        <View
          accessibilityLabel="Inline code"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={145}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code-block"
      >
        <View
          accessibilityLabel="Code block"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "flex": 1,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={139}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-send-audio"
      >
        <View
          accessibilityLabel="Record audio message"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
    </View>
  </View>,
  <View
    style={
      {
        "height": 0,
      }
    }
  />,
]
`;

exports[`MessageComposer Toolbar Markdown type test and tap code-block 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      [
        {
          "borderTopWidth": 1,
          "minHeight": 48,
          "paddingHorizontal": 16,
        },
        {
          "backgroundColor": "#FFFFFF",
          "borderTopColor": "#CBCED1",
        },
      ]
    }
    testID="message-composer"
  >
    <View
      style={
        {
          "flexDirection": "row",
        }
      }
    >
      <TextInput
        blurOnSubmit={false}
        defaultValue=""
        keyboardAppearance="light"
        multiline={true}
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSelectionChange={[Function]}
        placeholder="Message @Rocket Chat"
        placeholderTextColor="#9EA2A8"
        style={
          [
            {
              "backgroundColor": "transparent",
              "flex": 1,
              "fontFamily": "Inter",
              "fontSize": 16,
              "fontWeight": "400",
              "lineHeight": 22,
              "maxHeight": 200,
              "minHeight": 48,
              "paddingBottom": 12,
              "paddingTop": 12,
              "textAlign": "left",
              "textAlignVertical": "center",
            },
            {
              "color": "#2F343D",
            },
          ]
        }
        testID="message-composer-input"
        underlineColorAndroid="transparent"
      />
    </View>
    <View
      style={
        {
          "flexDirection": "row",
          "paddingVertical": 12,
        }
      }
    >
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={166}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-close-markdown"
      >
        <View
          accessibilityLabel="Close"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={167}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-bold"
      >
        <View
          accessibilityLabel="Bold"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={168}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-italic"
      >
        <View
          accessibilityLabel="Italic"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={169}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-strike"
      >
        <View
          accessibilityLabel="Strikethrough"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={170}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code"
      >
        <View
          accessibilityLabel="Inline code"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={171}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code-block"
      >
        <View
          accessibilityLabel="Code block"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "flex": 1,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={165}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-send-audio"
      >
        <View
          accessibilityLabel="Record audio message"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
    </View>
  </View>,
  <View
    style={
      {
        "height": 0,
      }
    }
  />,
]
`;

exports[`MessageComposer Toolbar Markdown type test and tap italic 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      [
        {
          "borderTopWidth": 1,
          "minHeight": 48,
          "paddingHorizontal": 16,
        },
        {
          "backgroundColor": "#FFFFFF",
          "borderTopColor": "#CBCED1",
        },
      ]
    }
    testID="message-composer"
  >
    <View
      style={
        {
          "flexDirection": "row",
        }
      }
    >
      <TextInput
        blurOnSubmit={false}
        defaultValue=""
        keyboardAppearance="light"
        multiline={true}
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSelectionChange={[Function]}
        placeholder="Message @Rocket Chat"
        placeholderTextColor="#9EA2A8"
        style={
          [
            {
              "backgroundColor": "transparent",
              "flex": 1,
              "fontFamily": "Inter",
              "fontSize": 16,
              "fontWeight": "400",
              "lineHeight": 22,
              "maxHeight": 200,
              "minHeight": 48,
              "paddingBottom": 12,
              "paddingTop": 12,
              "textAlign": "left",
              "textAlignVertical": "center",
            },
            {
              "color": "#2F343D",
            },
          ]
        }
        testID="message-composer-input"
        underlineColorAndroid="transparent"
      />
    </View>
    <View
      style={
        {
          "flexDirection": "row",
          "paddingVertical": 12,
        }
      }
    >
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={88}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-close-markdown"
      >
        <View
          accessibilityLabel="Close"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={89}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-bold"
      >
        <View
          accessibilityLabel="Bold"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={90}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-italic"
      >
        <View
          accessibilityLabel="Italic"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={91}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-strike"
      >
        <View
          accessibilityLabel="Strikethrough"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={92}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code"
      >
        <View
          accessibilityLabel="Inline code"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={93}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code-block"
      >
        <View
          accessibilityLabel="Code block"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "flex": 1,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={87}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-send-audio"
      >
        <View
          accessibilityLabel="Record audio message"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
    </View>
  </View>,
  <View
    style={
      {
        "height": 0,
      }
    }
  />,
]
`;

exports[`MessageComposer Toolbar Markdown type test and tap strike 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      [
        {
          "borderTopWidth": 1,
          "minHeight": 48,
          "paddingHorizontal": 16,
        },
        {
          "backgroundColor": "#FFFFFF",
          "borderTopColor": "#CBCED1",
        },
      ]
    }
    testID="message-composer"
  >
    <View
      style={
        {
          "flexDirection": "row",
        }
      }
    >
      <TextInput
        blurOnSubmit={false}
        defaultValue=""
        keyboardAppearance="light"
        multiline={true}
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSelectionChange={[Function]}
        placeholder="Message @Rocket Chat"
        placeholderTextColor="#9EA2A8"
        style={
          [
            {
              "backgroundColor": "transparent",
              "flex": 1,
              "fontFamily": "Inter",
              "fontSize": 16,
              "fontWeight": "400",
              "lineHeight": 22,
              "maxHeight": 200,
              "minHeight": 48,
              "paddingBottom": 12,
              "paddingTop": 12,
              "textAlign": "left",
              "textAlignVertical": "center",
            },
            {
              "color": "#2F343D",
            },
          ]
        }
        testID="message-composer-input"
        underlineColorAndroid="transparent"
      />
    </View>
    <View
      style={
        {
          "flexDirection": "row",
          "paddingVertical": 12,
        }
      }
    >
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={114}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-close-markdown"
      >
        <View
          accessibilityLabel="Close"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={115}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-bold"
      >
        <View
          accessibilityLabel="Bold"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={116}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-italic"
      >
        <View
          accessibilityLabel="Italic"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={117}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-strike"
      >
        <View
          accessibilityLabel="Strikethrough"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={118}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code"
      >
        <View
          accessibilityLabel="Inline code"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={119}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-code-block"
      >
        <View
          accessibilityLabel="Code block"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "flex": 1,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={113}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-send-audio"
      >
        <View
          accessibilityLabel="Record audio message"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
    </View>
  </View>,
  <View
    style={
      {
        "height": 0,
      }
    }
  />,
]
`;

exports[`MessageComposer Toolbar tap actions 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      [
        {
          "borderTopWidth": 1,
          "minHeight": 48,
          "paddingHorizontal": 16,
        },
        {
          "backgroundColor": "#FFFFFF",
          "borderTopColor": "#CBCED1",
        },
      ]
    }
    testID="message-composer"
  >
    <View
      style={
        {
          "flexDirection": "row",
        }
      }
    >
      <TextInput
        blurOnSubmit={false}
        defaultValue=""
        keyboardAppearance="light"
        multiline={true}
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSelectionChange={[Function]}
        placeholder="Message @Rocket Chat"
        placeholderTextColor="#9EA2A8"
        style={
          [
            {
              "backgroundColor": "transparent",
              "flex": 1,
              "fontFamily": "Inter",
              "fontSize": 16,
              "fontWeight": "400",
              "lineHeight": 22,
              "maxHeight": 200,
              "minHeight": 48,
              "paddingBottom": 12,
              "paddingTop": 12,
              "textAlign": "left",
              "textAlignVertical": "center",
            },
            {
              "color": "#2F343D",
            },
          ]
        }
        testID="message-composer-input"
        underlineColorAndroid="transparent"
      />
    </View>
    <View
      style={
        {
          "flexDirection": "row",
          "paddingVertical": 12,
        }
      }
    >
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={3}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-actions"
      >
        <View
          accessibilityLabel="Actions"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={4}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-open-emoji"
      >
        <View
          accessibilityLabel="Emoji selector"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={5}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-open-markdown"
      >
        <View
          accessibilityLabel="Markdown tools"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={6}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-mention"
      >
        <View
          accessibilityLabel="Mention user"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "flex": 1,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={7}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-send-audio"
      >
        <View
          accessibilityLabel="Record audio message"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
    </View>
  </View>,
  <View
    style={
      {
        "height": 0,
      }
    }
  />,
]
`;

exports[`MessageComposer Toolbar tap emoji 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      [
        {
          "borderTopWidth": 1,
          "minHeight": 48,
          "paddingHorizontal": 16,
        },
        {
          "backgroundColor": "#FFFFFF",
          "borderTopColor": "#CBCED1",
        },
      ]
    }
    testID="message-composer"
  >
    <View
      style={
        {
          "flexDirection": "row",
        }
      }
    >
      <TextInput
        blurOnSubmit={false}
        defaultValue=""
        keyboardAppearance="light"
        multiline={true}
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSelectionChange={[Function]}
        placeholder="Message @Rocket Chat"
        placeholderTextColor="#9EA2A8"
        style={
          [
            {
              "backgroundColor": "transparent",
              "flex": 1,
              "fontFamily": "Inter",
              "fontSize": 16,
              "fontWeight": "400",
              "lineHeight": 22,
              "maxHeight": 200,
              "minHeight": 48,
              "paddingBottom": 12,
              "paddingTop": 12,
              "textAlign": "left",
              "textAlignVertical": "center",
            },
            {
              "color": "#2F343D",
            },
          ]
        }
        testID="message-composer-input"
        underlineColorAndroid="transparent"
      />
    </View>
    <View
      style={
        {
          "flexDirection": "row",
          "paddingVertical": 12,
        }
      }
    >
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={15}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-actions"
      >
        <View
          accessibilityLabel="Actions"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={16}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-close-emoji"
      >
        <View
          accessibilityLabel="Back to keyboard"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "flex": 1,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={17}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-send-audio"
      >
        <View
          accessibilityLabel="Record audio message"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
    </View>
  </View>,
  <View
    style={
      {
        "height": 0,
      }
    }
  >
    <View
      onLayout={[Function]}
      style={
        [
          {
            "flex": 1,
          },
          {
            "backgroundColor": "#FFFFFF",
            "marginBottom": 0,
          },
        ]
      }
    >
      <View
        onLayout={[Function]}
        style={
          [
            {
              "flex": 1,
            },
            {
              "width": "100%",
            },
          ]
        }
      >
        <View
          style={
            {
              "flexDirection": "row",
              "width": "100%",
            }
          }
        >
          <View
            style={
              {
                "alignItems": "center",
                "flex": 1,
                "flexDirection": "column",
              }
            }
          >
            <RNGestureHandlerButton
              collapsable={false}
              delayLongPress={600}
              enabled={true}
              exclusive={true}
              handlerTag={18}
              handlerType="NativeViewGestureHandler"
              hitSlop={
                {
                  "bottom": 10,
                  "left": 10,
                  "right": 10,
                  "top": 10,
                }
              }
              innerRef={null}
              onGestureHandlerEvent={[Function]}
              onGestureHandlerStateChange={[Function]}
              rippleColor="transparent"
              style={
                [
                  undefined,
                  {
                    "cursor": undefined,
                  },
                ]
              }
              touchSoundDisabled={false}
            >
              <View
                accessible={true}
                collapsable={false}
                style={
                  {
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityLabel="Recently used"
                  accessible={true}
                  allowFontScaling={false}
                  selectable={false}
                  style={
                    [
                      {
                        "color": "#156FF5",
                        "fontSize": NaN,
                      },
                      [
                        {
                          "lineHeight": NaN,
                        },
                        {
                          "paddingVertical": 4,
                        },
                      ],
                      {
                        "fontFamily": "custom",
                        "fontStyle": "normal",
                        "fontWeight": "normal",
                      },
                      {},
                    ]
                  }
                  testID="emoji-picker-tab-clock"
                >
                  
                </Text>
              </View>
            </RNGestureHandlerButton>
            <View
              style={
                [
                  {
                    "height": 2,
                    "width": "100%",
                  },
                  {
                    "backgroundColor": "#156FF5",
                  },
                ]
              }
            />
          </View>
          <View
            style={
              {
                "alignItems": "center",
                "flex": 1,
                "flexDirection": "column",
              }
            }
          >
            <RNGestureHandlerButton
              collapsable={false}
              delayLongPress={600}
              enabled={true}
              exclusive={true}
              handlerTag={19}
              handlerType="NativeViewGestureHandler"
              hitSlop={
                {
                  "bottom": 10,
                  "left": 10,
                  "right": 10,
                  "top": 10,
                }
              }
              innerRef={null}
              onGestureHandlerEvent={[Function]}
              onGestureHandlerStateChange={[Function]}
              rippleColor="transparent"
              style={
                [
                  undefined,
                  {
                    "cursor": undefined,
                  },
                ]
              }
              touchSoundDisabled={false}
            >
              <View
                accessible={true}
                collapsable={false}
                style={
                  {
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityLabel="Smileys and people"
                  accessible={true}
                  allowFontScaling={false}
                  selectable={false}
                  style={
                    [
                      {
                        "color": "#6C727A",
                        "fontSize": NaN,
                      },
                      [
                        {
                          "lineHeight": NaN,
                        },
                        {
                          "paddingVertical": 4,
                        },
                      ],
                      {
                        "fontFamily": "custom",
                        "fontStyle": "normal",
                        "fontWeight": "normal",
                      },
                      {},
                    ]
                  }
                  testID="emoji-picker-tab-emoji"
                >
                  
                </Text>
              </View>
            </RNGestureHandlerButton>
            <View
              style={
                [
                  {
                    "height": 2,
                    "width": "100%",
                  },
                  {
                    "backgroundColor": "#EBECEF",
                  },
                ]
              }
            />
          </View>
          <View
            style={
              {
                "alignItems": "center",
                "flex": 1,
                "flexDirection": "column",
              }
            }
          >
            <RNGestureHandlerButton
              collapsable={false}
              delayLongPress={600}
              enabled={true}
              exclusive={true}
              handlerTag={20}
              handlerType="NativeViewGestureHandler"
              hitSlop={
                {
                  "bottom": 10,
                  "left": 10,
                  "right": 10,
                  "top": 10,
                }
              }
              innerRef={null}
              onGestureHandlerEvent={[Function]}
              onGestureHandlerStateChange={[Function]}
              rippleColor="transparent"
              style={
                [
                  undefined,
                  {
                    "cursor": undefined,
                  },
                ]
              }
              touchSoundDisabled={false}
            >
              <View
                accessible={true}
                collapsable={false}
                style={
                  {
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityLabel="Animals and nature"
                  accessible={true}
                  allowFontScaling={false}
                  selectable={false}
                  style={
                    [
                      {
                        "color": "#6C727A",
                        "fontSize": NaN,
                      },
                      [
                        {
                          "lineHeight": NaN,
                        },
                        {
                          "paddingVertical": 4,
                        },
                      ],
                      {
                        "fontFamily": "custom",
                        "fontStyle": "normal",
                        "fontWeight": "normal",
                      },
                      {},
                    ]
                  }
                  testID="emoji-picker-tab-leaf"
                >
                  
                </Text>
              </View>
            </RNGestureHandlerButton>
            <View
              style={
                [
                  {
                    "height": 2,
                    "width": "100%",
                  },
                  {
                    "backgroundColor": "#EBECEF",
                  },
                ]
              }
            />
          </View>
          <View
            style={
              {
                "alignItems": "center",
                "flex": 1,
                "flexDirection": "column",
              }
            }
          >
            <RNGestureHandlerButton
              collapsable={false}
              delayLongPress={600}
              enabled={true}
              exclusive={true}
              handlerTag={21}
              handlerType="NativeViewGestureHandler"
              hitSlop={
                {
                  "bottom": 10,
                  "left": 10,
                  "right": 10,
                  "top": 10,
                }
              }
              innerRef={null}
              onGestureHandlerEvent={[Function]}
              onGestureHandlerStateChange={[Function]}
              rippleColor="transparent"
              style={
                [
                  undefined,
                  {
                    "cursor": undefined,
                  },
                ]
              }
              touchSoundDisabled={false}
            >
              <View
                accessible={true}
                collapsable={false}
                style={
                  {
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityLabel="Food and drink"
                  accessible={true}
                  allowFontScaling={false}
                  selectable={false}
                  style={
                    [
                      {
                        "color": "#6C727A",
                        "fontSize": NaN,
                      },
                      [
                        {
                          "lineHeight": NaN,
                        },
                        {
                          "paddingVertical": 4,
                        },
                      ],
                      {
                        "fontFamily": "custom",
                        "fontStyle": "normal",
                        "fontWeight": "normal",
                      },
                      {},
                    ]
                  }
                  testID="emoji-picker-tab-burger"
                >
                  
                </Text>
              </View>
            </RNGestureHandlerButton>
            <View
              style={
                [
                  {
                    "height": 2,
                    "width": "100%",
                  },
                  {
                    "backgroundColor": "#EBECEF",
                  },
                ]
              }
            />
          </View>
          <View
            style={
              {
                "alignItems": "center",
                "flex": 1,
                "flexDirection": "column",
              }
            }
          >
            <RNGestureHandlerButton
              collapsable={false}
              delayLongPress={600}
              enabled={true}
              exclusive={true}
              handlerTag={22}
              handlerType="NativeViewGestureHandler"
              hitSlop={
                {
                  "bottom": 10,
                  "left": 10,
                  "right": 10,
                  "top": 10,
                }
              }
              innerRef={null}
              onGestureHandlerEvent={[Function]}
              onGestureHandlerStateChange={[Function]}
              rippleColor="transparent"
              style={
                [
                  undefined,
                  {
                    "cursor": undefined,
                  },
                ]
              }
              touchSoundDisabled={false}
            >
              <View
                accessible={true}
                collapsable={false}
                style={
                  {
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityLabel="Activity"
                  accessible={true}
                  allowFontScaling={false}
                  selectable={false}
                  style={
                    [
                      {
                        "color": "#6C727A",
                        "fontSize": NaN,
                      },
                      [
                        {
                          "lineHeight": NaN,
                        },
                        {
                          "paddingVertical": 4,
                        },
                      ],
                      {
                        "fontFamily": "custom",
                        "fontStyle": "normal",
                        "fontWeight": "normal",
                      },
                      {},
                    ]
                  }
                  testID="emoji-picker-tab-basketball"
                >
                  
                </Text>
              </View>
            </RNGestureHandlerButton>
            <View
              style={
                [
                  {
                    "height": 2,
                    "width": "100%",
                  },
                  {
                    "backgroundColor": "#EBECEF",
                  },
                ]
              }
            />
          </View>
          <View
            style={
              {
                "alignItems": "center",
                "flex": 1,
                "flexDirection": "column",
              }
            }
          >
            <RNGestureHandlerButton
              collapsable={false}
              delayLongPress={600}
              enabled={true}
              exclusive={true}
              handlerTag={23}
              handlerType="NativeViewGestureHandler"
              hitSlop={
                {
                  "bottom": 10,
                  "left": 10,
                  "right": 10,
                  "top": 10,
                }
              }
              innerRef={null}
              onGestureHandlerEvent={[Function]}
              onGestureHandlerStateChange={[Function]}
              rippleColor="transparent"
              style={
                [
                  undefined,
                  {
                    "cursor": undefined,
                  },
                ]
              }
              touchSoundDisabled={false}
            >
              <View
                accessible={true}
                collapsable={false}
                style={
                  {
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityLabel="Travel and places"
                  accessible={true}
                  allowFontScaling={false}
                  selectable={false}
                  style={
                    [
                      {
                        "color": "#6C727A",
                        "fontSize": NaN,
                      },
                      [
                        {
                          "lineHeight": NaN,
                        },
                        {
                          "paddingVertical": 4,
                        },
                      ],
                      {
                        "fontFamily": "custom",
                        "fontStyle": "normal",
                        "fontWeight": "normal",
                      },
                      {},
                    ]
                  }
                  testID="emoji-picker-tab-airplane"
                >
                  
                </Text>
              </View>
            </RNGestureHandlerButton>
            <View
              style={
                [
                  {
                    "height": 2,
                    "width": "100%",
                  },
                  {
                    "backgroundColor": "#EBECEF",
                  },
                ]
              }
            />
          </View>
          <View
            style={
              {
                "alignItems": "center",
                "flex": 1,
                "flexDirection": "column",
              }
            }
          >
            <RNGestureHandlerButton
              collapsable={false}
              delayLongPress={600}
              enabled={true}
              exclusive={true}
              handlerTag={24}
              handlerType="NativeViewGestureHandler"
              hitSlop={
                {
                  "bottom": 10,
                  "left": 10,
                  "right": 10,
                  "top": 10,
                }
              }
              innerRef={null}
              onGestureHandlerEvent={[Function]}
              onGestureHandlerStateChange={[Function]}
              rippleColor="transparent"
              style={
                [
                  undefined,
                  {
                    "cursor": undefined,
                  },
                ]
              }
              touchSoundDisabled={false}
            >
              <View
                accessible={true}
                collapsable={false}
                style={
                  {
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityLabel="Objects"
                  accessible={true}
                  allowFontScaling={false}
                  selectable={false}
                  style={
                    [
                      {
                        "color": "#6C727A",
                        "fontSize": NaN,
                      },
                      [
                        {
                          "lineHeight": NaN,
                        },
                        {
                          "paddingVertical": 4,
                        },
                      ],
                      {
                        "fontFamily": "custom",
                        "fontStyle": "normal",
                        "fontWeight": "normal",
                      },
                      {},
                    ]
                  }
                  testID="emoji-picker-tab-lamp-bulb"
                >
                  
                </Text>
              </View>
            </RNGestureHandlerButton>
            <View
              style={
                [
                  {
                    "height": 2,
                    "width": "100%",
                  },
                  {
                    "backgroundColor": "#EBECEF",
                  },
                ]
              }
            />
          </View>
          <View
            style={
              {
                "alignItems": "center",
                "flex": 1,
                "flexDirection": "column",
              }
            }
          >
            <RNGestureHandlerButton
              collapsable={false}
              delayLongPress={600}
              enabled={true}
              exclusive={true}
              handlerTag={25}
              handlerType="NativeViewGestureHandler"
              hitSlop={
                {
                  "bottom": 10,
                  "left": 10,
                  "right": 10,
                  "top": 10,
                }
              }
              innerRef={null}
              onGestureHandlerEvent={[Function]}
              onGestureHandlerStateChange={[Function]}
              rippleColor="transparent"
              style={
                [
                  undefined,
                  {
                    "cursor": undefined,
                  },
                ]
              }
              touchSoundDisabled={false}
            >
              <View
                accessible={true}
                collapsable={false}
                style={
                  {
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityLabel="Symbols"
                  accessible={true}
                  allowFontScaling={false}
                  selectable={false}
                  style={
                    [
                      {
                        "color": "#6C727A",
                        "fontSize": NaN,
                      },
                      [
                        {
                          "lineHeight": NaN,
                        },
                        {
                          "paddingVertical": 4,
                        },
                      ],
                      {
                        "fontFamily": "custom",
                        "fontStyle": "normal",
                        "fontWeight": "normal",
                      },
                      {},
                    ]
                  }
                  testID="emoji-picker-tab-percentage"
                >
                  
                </Text>
              </View>
            </RNGestureHandlerButton>
            <View
              style={
                [
                  {
                    "height": 2,
                    "width": "100%",
                  },
                  {
                    "backgroundColor": "#EBECEF",
                  },
                ]
              }
            />
          </View>
          <View
            style={
              {
                "alignItems": "center",
                "flex": 1,
                "flexDirection": "column",
              }
            }
          >
            <RNGestureHandlerButton
              collapsable={false}
              delayLongPress={600}
              enabled={true}
              exclusive={true}
              handlerTag={26}
              handlerType="NativeViewGestureHandler"
              hitSlop={
                {
                  "bottom": 10,
                  "left": 10,
                  "right": 10,
                  "top": 10,
                }
              }
              innerRef={null}
              onGestureHandlerEvent={[Function]}
              onGestureHandlerStateChange={[Function]}
              rippleColor="transparent"
              style={
                [
                  undefined,
                  {
                    "cursor": undefined,
                  },
                ]
              }
              touchSoundDisabled={false}
            >
              <View
                accessible={true}
                collapsable={false}
                style={
                  {
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityLabel="Flags"
                  accessible={true}
                  allowFontScaling={false}
                  selectable={false}
                  style={
                    [
                      {
                        "color": "#6C727A",
                        "fontSize": NaN,
                      },
                      [
                        {
                          "lineHeight": NaN,
                        },
                        {
                          "paddingVertical": 4,
                        },
                      ],
                      {
                        "fontFamily": "custom",
                        "fontStyle": "normal",
                        "fontWeight": "normal",
                      },
                      {},
                    ]
                  }
                  testID="emoji-picker-tab-flag"
                >
                  
                </Text>
              </View>
            </RNGestureHandlerButton>
            <View
              style={
                [
                  {
                    "height": 2,
                    "width": "100%",
                  },
                  {
                    "backgroundColor": "#EBECEF",
                  },
                ]
              }
            />
          </View>
          <View
            style={
              {
                "alignItems": "center",
                "flex": 1,
                "flexDirection": "column",
              }
            }
          >
            <RNGestureHandlerButton
              collapsable={false}
              delayLongPress={600}
              enabled={true}
              exclusive={true}
              handlerTag={27}
              handlerType="NativeViewGestureHandler"
              hitSlop={
                {
                  "bottom": 10,
                  "left": 10,
                  "right": 10,
                  "top": 10,
                }
              }
              innerRef={null}
              onGestureHandlerEvent={[Function]}
              onGestureHandlerStateChange={[Function]}
              rippleColor="transparent"
              style={
                [
                  undefined,
                  {
                    "cursor": undefined,
                  },
                ]
              }
              touchSoundDisabled={false}
            >
              <View
                accessible={true}
                collapsable={false}
                style={
                  {
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityLabel="Custom"
                  accessible={true}
                  allowFontScaling={false}
                  selectable={false}
                  style={
                    [
                      {
                        "color": "#6C727A",
                        "fontSize": NaN,
                      },
                      [
                        {
                          "lineHeight": NaN,
                        },
                        {
                          "paddingVertical": 4,
                        },
                      ],
                      {
                        "fontFamily": "custom",
                        "fontStyle": "normal",
                        "fontWeight": "normal",
                      },
                      {},
                    ]
                  }
                  testID="emoji-picker-tab-rocket"
                >
                  
                </Text>
              </View>
            </RNGestureHandlerButton>
            <View
              style={
                [
                  {
                    "height": 2,
                    "width": "100%",
                  },
                  {
                    "backgroundColor": "#EBECEF",
                  },
                ]
              }
            />
          </View>
        </View>
        <View
          collapsable={false}
          style={
            [
              {
                "flex": 1,
                "overflow": "hidden",
                "width": "100%",
              },
              undefined,
            ]
          }
        >
          <View
            style={
              [
                {
                  "height": "100%",
                  "position": "absolute",
                  "width": "100%",
                  "zIndex": 0,
                },
                {
                  "left": 0,
                },
                undefined,
                {
                  "transform": [
                    {
                      "translateX": -0,
                    },
                  ],
                },
              ]
            }
          >
            <View
              style={
                [
                  {
                    "height": "100%",
                    "width": "100%",
                  },
                  {
                    "opacity": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                    ],
                  },
                ]
              }
            />
          </View>
          <View
            style={
              [
                {
                  "height": "100%",
                  "position": "absolute",
                  "width": "100%",
                  "zIndex": 0,
                },
                {
                  "left": 0,
                },
                undefined,
                {
                  "transform": [
                    {
                      "translateX": -0,
                    },
                  ],
                },
              ]
            }
          >
            <View
              style={
                [
                  {
                    "height": "100%",
                    "width": "100%",
                  },
                  {
                    "opacity": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                    ],
                  },
                ]
              }
            />
          </View>
          <View
            style={
              [
                {
                  "height": "100%",
                  "position": "absolute",
                  "width": "100%",
                  "zIndex": 0,
                },
                {
                  "left": 0,
                },
                undefined,
                {
                  "transform": [
                    {
                      "translateX": -0,
                    },
                  ],
                },
              ]
            }
          >
            <View
              style={
                [
                  {
                    "height": "100%",
                    "width": "100%",
                  },
                  {
                    "opacity": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                    ],
                  },
                ]
              }
            />
          </View>
          <View
            style={
              [
                {
                  "height": "100%",
                  "position": "absolute",
                  "width": "100%",
                  "zIndex": 0,
                },
                {
                  "left": 0,
                },
                undefined,
                {
                  "transform": [
                    {
                      "translateX": -0,
                    },
                  ],
                },
              ]
            }
          >
            <View
              style={
                [
                  {
                    "height": "100%",
                    "width": "100%",
                  },
                  {
                    "opacity": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                    ],
                  },
                ]
              }
            />
          </View>
          <View
            style={
              [
                {
                  "height": "100%",
                  "position": "absolute",
                  "width": "100%",
                  "zIndex": 0,
                },
                {
                  "left": 0,
                },
                undefined,
                {
                  "transform": [
                    {
                      "translateX": -0,
                    },
                  ],
                },
              ]
            }
          >
            <View
              style={
                [
                  {
                    "height": "100%",
                    "width": "100%",
                  },
                  {
                    "opacity": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                    ],
                  },
                ]
              }
            />
          </View>
          <View
            style={
              [
                {
                  "height": "100%",
                  "position": "absolute",
                  "width": "100%",
                  "zIndex": 0,
                },
                {
                  "left": 0,
                },
                undefined,
                {
                  "transform": [
                    {
                      "translateX": -0,
                    },
                  ],
                },
              ]
            }
          >
            <View
              style={
                [
                  {
                    "height": "100%",
                    "width": "100%",
                  },
                  {
                    "opacity": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                    ],
                  },
                ]
              }
            />
          </View>
          <View
            style={
              [
                {
                  "height": "100%",
                  "position": "absolute",
                  "width": "100%",
                  "zIndex": 0,
                },
                {
                  "left": 0,
                },
                undefined,
                {
                  "transform": [
                    {
                      "translateX": -0,
                    },
                  ],
                },
              ]
            }
          >
            <View
              style={
                [
                  {
                    "height": "100%",
                    "width": "100%",
                  },
                  {
                    "opacity": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                    ],
                  },
                ]
              }
            />
          </View>
          <View
            style={
              [
                {
                  "height": "100%",
                  "position": "absolute",
                  "width": "100%",
                  "zIndex": 0,
                },
                {
                  "left": 0,
                },
                undefined,
                {
                  "transform": [
                    {
                      "translateX": -0,
                    },
                  ],
                },
              ]
            }
          >
            <View
              style={
                [
                  {
                    "height": "100%",
                    "width": "100%",
                  },
                  {
                    "opacity": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                    ],
                  },
                ]
              }
            />
          </View>
          <View
            style={
              [
                {
                  "height": "100%",
                  "position": "absolute",
                  "width": "100%",
                  "zIndex": 0,
                },
                {
                  "left": 0,
                },
                undefined,
                {
                  "transform": [
                    {
                      "translateX": -0,
                    },
                  ],
                },
              ]
            }
          >
            <View
              style={
                [
                  {
                    "height": "100%",
                    "width": "100%",
                  },
                  {
                    "opacity": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                    ],
                  },
                ]
              }
            />
          </View>
          <View
            style={
              [
                {
                  "height": "100%",
                  "position": "absolute",
                  "width": "100%",
                  "zIndex": 0,
                },
                {
                  "left": 0,
                },
                undefined,
                {
                  "transform": [
                    {
                      "translateX": -0,
                    },
                  ],
                },
              ]
            }
          >
            <View
              style={
                [
                  {
                    "height": "100%",
                    "width": "100%",
                  },
                  {
                    "opacity": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                    ],
                  },
                ]
              }
            />
          </View>
        </View>
      </View>
      <View
        style={
          [
            {
              "alignItems": "center",
              "borderTopWidth": 1,
              "flexDirection": "row",
              "height": 44,
              "justifyContent": "space-between",
              "paddingHorizontal": 12,
            },
            {
              "borderTopColor": "#EBECEF",
            },
          ]
        }
      >
        <View
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={true}
          onBlur={[Function]}
          onClick={[Function]}
          onFocus={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            [
              {
                "alignItems": "center",
                "height": 44,
                "justifyContent": "center",
                "width": 44,
              },
              {
                "backgroundColor": "transparent",
              },
            ]
          }
          testID="emoji-picker-search"
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
        <View
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={true}
          onBlur={[Function]}
          onClick={[Function]}
          onFocus={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            [
              {
                "alignItems": "center",
                "height": 44,
                "justifyContent": "center",
                "width": 44,
              },
              {
                "backgroundColor": "transparent",
              },
            ]
          }
          testID="emoji-picker-backspace"
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </View>
    </View>
  </View>,
]
`;

exports[`MessageComposer Toolbar tap mention 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      [
        {
          "borderTopWidth": 1,
          "minHeight": 48,
          "paddingHorizontal": 16,
        },
        {
          "backgroundColor": "#FFFFFF",
          "borderTopColor": "#CBCED1",
        },
      ]
    }
    testID="message-composer"
  >
    <View
      style={
        {
          "flexDirection": "row",
        }
      }
    >
      <TextInput
        blurOnSubmit={false}
        defaultValue=""
        keyboardAppearance="light"
        multiline={true}
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSelectionChange={[Function]}
        placeholder="Message @Rocket Chat"
        placeholderTextColor="#9EA2A8"
        style={
          [
            {
              "backgroundColor": "transparent",
              "flex": 1,
              "fontFamily": "Inter",
              "fontSize": 16,
              "fontWeight": "400",
              "lineHeight": 22,
              "maxHeight": 200,
              "minHeight": 48,
              "paddingBottom": 12,
              "paddingTop": 12,
              "textAlign": "left",
              "textAlignVertical": "center",
            },
            {
              "color": "#2F343D",
            },
          ]
        }
        testID="message-composer-input"
        underlineColorAndroid="transparent"
      />
    </View>
    <View
      style={
        {
          "flexDirection": "row",
          "paddingVertical": 12,
        }
      }
    >
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={174}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-actions"
      >
        <View
          accessibilityLabel="Actions"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={175}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-open-emoji"
      >
        <View
          accessibilityLabel="Emoji selector"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={176}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-open-markdown"
      >
        <View
          accessibilityLabel="Markdown tools"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "width": 12,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={177}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-mention"
      >
        <View
          accessibilityLabel="Mention user"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
      <View
        style={
          {
            "flex": 1,
          }
        }
      />
      <RNGestureHandlerButton
        activeOpacity={0.3}
        borderless={true}
        collapsable={false}
        delayLongPress={600}
        handlerTag={178}
        handlerType="NativeViewGestureHandler"
        hitSlop={
          {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        innerRef={null}
        onActiveStateChange={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onPress={[Function]}
        style={
          [
            {
              "alignItems": "center",
              "height": 48,
              "justifyContent": "center",
              "opacity": 1,
              "width": 48,
            },
            {
              "cursor": undefined,
            },
          ]
        }
        testID="message-composer-send-audio"
      >
        <View
          accessibilityLabel="Record audio message"
          accessibilityRole="button"
          accessible={true}
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              [
                {
                  "color": "#2F343D",
                  "fontSize": NaN,
                },
                [
                  {
                    "lineHeight": NaN,
                  },
                  undefined,
                ],
                {
                  "fontFamily": "custom",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
    </View>
  </View>,
  <View
    style={
      {
        "height": 0,
      }
    }
  />,
]
`;
