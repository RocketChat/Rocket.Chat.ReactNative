defaults: &defaults
  working_directory: ~/repo

version: 2
jobs:
  lint-testunit:
    <<: *defaults
    docker:
      - image: circleci/node:8

    environment:
      CODECOV_TOKEN: caa771ab-3d45-4756-8e2a-e1f25996fef6

    steps:
      - checkout

      - run:
          name: Install NPM modules
          command: |
            npm install
            # npm install codecov

      - run:
          name: Lint
          command: |
            npm run lint

      - run:
          name: Test
          command: |
            npm run test

      - run:
          name: Codecov
          command: |
            npx codecov

  e2e-test:
    macos:
      xcode: "10.0.0"

    environment:
      BASH_ENV: "~/.nvm/nvm.sh"

    steps:
      - checkout

      - run:
          name: Install Node 8
          command: |
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash
            source ~/.nvm/nvm.sh
            # https://github.com/creationix/nvm/issues/1394
            set +e
            nvm install 8

      - run:
          name: Install appleSimUtils
          command: |
            brew update
            brew tap wix/brew
            brew install wix/brew/applesimutils

      - run:
          name: Install NPM modules
          command: |
            rm -rf node_modules
            npm install
            npm install -g detox-cli

      - run:
          name: Build
          command: |
            detox build --configuration ios.sim.release

      - run:
          name: Test
          command: |
            detox test --configuration ios.sim.release --cleanup

      - store_artifacts:
          path: /tmp/screenshots

  android-build:
    <<: *defaults
    docker:
      - image: circleci/android:api-27-node8-alpha

    environment:
      # GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4096m -XX:+HeapDumpOnOutOfMemoryError"
      GRADLE_OPTS: -Xmx2048m -Dorg.gradle.daemon=false
      JVM_OPTS: -Xmx4096m
      TERM: dumb
      BASH_ENV: "~/.nvm/nvm.sh"

    steps:
      - checkout

      # - run:
      #     name: Install Node 8
      #     command: |
      #       curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash
      #       source ~/.nvm/nvm.sh
      #       nvm install 8

      - restore_cache:
          key: node-modules-{{ checksum ".circleci/config.yml" }}-{{ checksum "package-lock.json" }}

      - run:
          name: Install NPM modules
          command: |
            npm install

      - restore_cache:
          key: android-{{ checksum ".circleci/config.yml" }}-{{ checksum "android/build.gradle" }}-{{ checksum  "android/app/build.gradle" }}

      - run:
          name: Configure Gradle
          command: |
            cd android

            echo -e "" > ./gradle.properties
            echo -e "android.enableAapt2=false" >> ./gradle.properties

            if [[ $KEYSTORE ]]; then
              echo $KEYSTORE_BASE64 | base64 --decode > ./app/$KEYSTORE
              echo -e "KEYSTORE=$KEYSTORE" >> ./gradle.properties
              echo -e "KEYSTORE_PASSWORD=$KEYSTORE_PASSWORD" >> ./gradle.properties
              echo -e "KEY_ALIAS=$KEY_ALIAS" >> ./gradle.properties
              echo -e "KEY_PASSWORD=$KEYSTORE_PASSWORD" >> ./gradle.properties
            fi

            echo -e "VERSIONCODE=$CIRCLE_BUILD_NUM" >> ./gradle.properties

            echo -e "" > ./app/fabric.properties
            echo -e "apiKey=$FABRIC_KEY" >> ./app/fabric.properties
            echo -e "apiSecret=$FABRIC_SECRET" >> ./app/fabric.properties

      - run:
          name: Install Android Depedencies
          command: |
            cd android
            ./gradlew androidDependencies

      - run:
          name: Build Android App
          command: |
            cd android
            if [[ $KEYSTORE ]]; then
              ./gradlew assembleRelease
            else
              ./gradlew assembleDebug
            fi

            mkdir -p /tmp/build

            mv app/build/outputs /tmp/build/

      - store_artifacts:
          path: /tmp/build/outputs

      - save_cache:
          key: node-modules-{{ checksum ".circleci/config.yml" }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules

      - save_cache:
          key: android-{{ checksum ".circleci/config.yml" }}-{{ checksum "android/build.gradle" }}-{{ checksum  "android/app/build.gradle" }}
          paths:
            - ~/.gradle

  ios-build:
    macos:
      xcode: "10.0.0"

    environment:
      BASH_ENV: "~/.nvm/nvm.sh"

    steps:
      - checkout

      - run:
          name: Install Node 8
          command: |
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash
            source ~/.nvm/nvm.sh
            # https://github.com/creationix/nvm/issues/1394
            set +e
            nvm install 8

      - run:
          name: Update Fastlane
          command: |
            brew update
            brew install ruby
            sudo gem install fastlane

      - run:
          name: Install NPM modules
          command: |
            rm -rf node_modules
            npm install

      - run:
          name: Fix known build error
          command: |
            # Fix error https://github.com/facebook/react-native/issues/14382
            cd node_modules/react-native/scripts/
            curl https://raw.githubusercontent.com/facebook/react-native/5c53f89dd86160301feee024bce4ce0c89e8c187/scripts/ios-configure-glog.sh > ios-configure-glog.sh
            chmod +x ios-configure-glog.sh

      - run:
          name: Fastlane Build
          no_output_timeout: 1200
          command: |
            cd ios
            agvtool new-version -all $CIRCLE_BUILD_NUM
            /usr/libexec/PlistBuddy -c "Set Fabric:APIKey $FABRIC_KEY" ./RocketChatRN/Info.plist
            echo -e "./Fabric.framework/run $FABRIC_KEY $FABRIC_SECRET" > ./RocketChatRN/Fabric.sh

            if [[ $MATCH_KEYCHAIN_NAME ]]; then
              fastlane ios release
            else
              export MATCH_KEYCHAIN_NAME="temp"
              export MATCH_KEYCHAIN_PASSWORD="temp"
              fastlane ios build
            fi

      - store_artifacts:
          path: ios/RocketChatRN.ipa

      - persist_to_workspace:
          root: .
          paths:
            - ios/*.ipa
            - ios/fastlane/report.xml

  ios-testflight:
    macos:
      xcode: "10.0.0"

    steps:
      - checkout

      - attach_workspace:
          at: ios

      - run:
          name: Update Fastlane
          command: |
            brew update
            brew install ruby
            sudo gem install fastlane

      - run:
          name: Fastlane Tesflight Upload
          command: |
            cd ios
            fastlane pilot upload --ipa ios/RocketChatRN.ipa --changelog "$(sh ../.circleci/changelog.sh)"

workflows:
  version: 2
  build-and-test:
    jobs:
      - lint-testunit
      - e2e-test:
          requires:
            - lint-testunit

      - ios-build:
          requires:
            - lint-testunit
      - ios-testflight:
          requires:
            - ios-build
          filters:
            branches:
              only:
                - beta
                - develop
                - master
      # - ios-testflight:
      #     requires:
      #       - ios-hold-testflight

      - android-build:
          requires:
            - lint-testunit
