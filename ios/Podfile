require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

platform :ios, '15.1'
install! 'cocoapods', :deterministic_uuids => false

prepare_react_native_project!

def all_pods
  pod 'simdjson', path: '../node_modules/@nozbe/simdjson', modular_headers: true
  $RNFirebaseAnalyticsWithoutAdIdSupport = true

  use_expo_modules!
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => true,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )
end

abstract_target 'defaults' do

  all_pods

  target 'RocketChatRN' # Experimental app
  target 'Rocket.Chat' # Official app
  target 'NotificationService'
end

$static_framework = [ 
  'WatermelonDB',
  'simdjson',
]
pre_install do |installer|
  Pod::Installer::Xcode::TargetValidator.send(:define_method, :verify_no_static_framework_transitive_dependencies) {}
    installer.pod_targets.each do |pod|
      if $static_framework.include?(pod.name)
        def pod.build_type;
        Pod::BuildType.static_library # >= 1.9
      end
    end
  end
end

post_install do |installer|
  # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
  react_native_post_install(
    installer,
    # config[:reactNativePath],
    # :mac_catalyst_enabled => false,
    # :ccache_enabled => true
  )

  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      config.build_settings['APPLICATION_EXTENSION_API_ONLY'] = 'NO'
      config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] = ""
      config.build_settings['CODE_SIGNING_REQUIRED'] = "NO"
      config.build_settings['CODE_SIGNING_ALLOWED'] = "NO"
      config.build_settings['ENABLE_BITCODE'] = "NO"
      # case target.name
      # when 'RCT-Folly'
      #   config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
      # else
      #   config.build_settings.delete('IPHONEOS_DEPLOYMENT_TARGET')
      # end
    end
  end

  # bitcode_strip_path = `xcrun --find bitcode_strip`.chop!
  # def strip_bitcode_from_framework(bitcode_strip_path, framework_relative_path)
  #   framework_path = File.join(Dir.pwd, framework_relative_path)
  #   command = "#{bitcode_strip_path} #{framework_path} -r -o #{framework_path}"
  #   puts "Stripping bitcode: #{command}"
  #   system(command)
  # end

  # framework_paths = [
  #   "Pods/OpenSSL-Universal/Frameworks/OpenSSL.xcframework/ios-arm64_armv7/OpenSSL.framework/OpenSSL"
  # ]

  # framework_paths.each do |framework_relative_path|
  #   strip_bitcode_from_framework(bitcode_strip_path, framework_relative_path)
  # end
end
