diff --git a/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewModule.java b/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewModule.java
index 5452c79..019032b 100644
--- a/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewModule.java
+++ b/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewModule.java
@@ -4,6 +4,7 @@ import android.app.Activity;
 
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.load.model.GlideUrl;
+import com.facebook.react.bridge.Promise;
 import com.facebook.react.bridge.ReactApplicationContext;
 import com.facebook.react.bridge.ReactContextBaseJavaModule;
 import com.facebook.react.bridge.ReactMethod;
@@ -53,4 +54,33 @@ class FastImageViewModule extends ReactContextBaseJavaModule {
             }
         });
     }
+
+    @ReactMethod
+    public void clearMemoryCache(final Promise promise) {
+        final Activity activity = getCurrentActivity();
+        if (activity == null) {
+            promise.resolve(null);
+            return;
+        }
+
+        activity.runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+                Glide.get(activity.getApplicationContext()).clearMemory();
+                promise.resolve(null);
+            }
+        });
+    }
+
+    @ReactMethod
+    public void clearDiskCache(Promise promise) {
+        final Activity activity = getCurrentActivity();
+        if (activity == null) {
+            promise.resolve(null);
+            return;
+        }
+
+        Glide.get(activity.getApplicationContext()).clearDiskCache();
+        promise.resolve(null);
+    }
 }
diff --git a/node_modules/react-native-fast-image/dist/index.d.ts b/node_modules/react-native-fast-image/dist/index.d.ts
index eecbd49..5979bac 100644
--- a/node_modules/react-native-fast-image/dist/index.d.ts
+++ b/node_modules/react-native-fast-image/dist/index.d.ts
@@ -95,6 +95,8 @@ interface FastImageStaticProperties {
     priority: typeof priority;
     cacheControl: typeof cacheControl;
     preload: (sources: Source[]) => void;
+    clearMemoryCache: () => Promise<void>;
+    clearDiskCache: () => Promise<void>;
 }
 declare const FastImage: React.ComponentType<FastImageProps> & FastImageStaticProperties;
 export default FastImage;
diff --git a/node_modules/react-native-fast-image/dist/index.js.flow b/node_modules/react-native-fast-image/dist/index.js.flow
index 71fac3a..7e17f37 100644
--- a/node_modules/react-native-fast-image/dist/index.js.flow
+++ b/node_modules/react-native-fast-image/dist/index.js.flow
@@ -68,4 +68,6 @@ declare export default class FastImage extends React$Component<FastImageProps> {
     static priority: Priority;
     static cacheControl: CacheControl;
     static preload: PreloadFn;
+    static clearMemoryCache: () => Promise<void>;
+    static clearDiskCache: () => Promise<void>;
 }
diff --git a/node_modules/react-native-fast-image/dist/react-native-fast-image.cjs.development.js b/node_modules/react-native-fast-image/dist/react-native-fast-image.cjs.development.js
index 6af0920..99ddffc 100644
--- a/node_modules/react-native-fast-image/dist/react-native-fast-image.cjs.development.js
+++ b/node_modules/react-native-fast-image/dist/react-native-fast-image.cjs.development.js
@@ -110,6 +110,14 @@ FastImage.preload = function (sources) {
   return FastImageViewNativeModule.preload(sources);
 };
 
+FastImage.clearMemoryCache = function () {
+  return FastImageViewNativeModule.clearMemoryCache();
+};
+
+FastImage.clearDiskCache = function () {
+  return FastImageViewNativeModule.clearDiskCache();
+};
+
 var styles = /*#__PURE__*/reactNative.StyleSheet.create({
   imageContainer: {
     overflow: 'hidden'
diff --git a/node_modules/react-native-fast-image/dist/react-native-fast-image.cjs.development.js.map b/node_modules/react-native-fast-image/dist/react-native-fast-image.cjs.development.js.map
index 7ad8900..99437b7 100644
--- a/node_modules/react-native-fast-image/dist/react-native-fast-image.cjs.development.js.map
+++ b/node_modules/react-native-fast-image/dist/react-native-fast-image.cjs.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"react-native-fast-image.cjs.development.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react'\nimport {\n    View,\n    Image,\n    NativeModules,\n    requireNativeComponent,\n    StyleSheet,\n    FlexStyle,\n    LayoutChangeEvent,\n    ShadowStyleIOS,\n    StyleProp,\n    TransformsStyle,\n} from 'react-native'\n\nconst FastImageViewNativeModule = NativeModules.FastImageView\n\ntype ResizeMode = 'contain' | 'cover' | 'stretch' | 'center'\n\nconst resizeMode = {\n    contain: 'contain',\n    cover: 'cover',\n    stretch: 'stretch',\n    center: 'center',\n} as const\n\ntype Priority = 'low' | 'normal' | 'high'\n\nconst priority = {\n    low: 'low',\n    normal: 'normal',\n    high: 'high',\n} as const\n\ntype Cache = 'low' | 'normal' | 'high'\n\nconst cacheControl = {\n    // Ignore headers, use uri as cache key, fetch only if not in cache.\n    immutable: 'immutable',\n    // Respect http headers, no aggressive caching.\n    web: 'web',\n    // Only load from cache.\n    cacheOnly: 'cacheOnly',\n} as const\n\nexport type Source = {\n    uri?: string\n    headers?: { [key: string]: string }\n    priority?: Priority\n    cache?: Cache\n}\n\nexport interface OnLoadEvent {\n    nativeEvent: {\n        width: number\n        height: number\n    }\n}\n\nexport interface OnProgressEvent {\n    nativeEvent: {\n        loaded: number\n        total: number\n    }\n}\n\nexport interface ImageStyle extends FlexStyle, TransformsStyle, ShadowStyleIOS {\n    backfaceVisibility?: 'visible' | 'hidden'\n    borderBottomLeftRadius?: number\n    borderBottomRightRadius?: number\n    backgroundColor?: string\n    borderColor?: string\n    borderWidth?: number\n    borderRadius?: number\n    borderTopLeftRadius?: number\n    borderTopRightRadius?: number\n    overlayColor?: string\n    tintColor?: string\n    opacity?: number\n}\n\nexport interface FastImageProps {\n    source: Source | number\n    resizeMode?: ResizeMode\n    fallback?: boolean\n\n    onLoadStart?(): void\n\n    onProgress?(event: OnProgressEvent): void\n\n    onLoad?(event: OnLoadEvent): void\n\n    onError?(): void\n\n    onLoadEnd?(): void\n\n    /**\n     * onLayout function\n     *\n     * Invoked on mount and layout changes with\n     *\n     * {nativeEvent: { layout: {x, y, width, height}}}.\n     */\n    onLayout?: (event: LayoutChangeEvent) => void\n\n    /**\n     *\n     * Style\n     */\n    style?: StyleProp<ImageStyle>\n\n    /**\n     * TintColor\n     *\n     * If supplied, changes the color of all the non-transparent pixels to the given color.\n     */\n\n    tintColor?: number | string\n\n    /**\n     * A unique identifier for this element to be used in UI Automation testing scripts.\n     */\n    testID?: string\n\n    /**\n     * Render children within the image.\n     */\n    children?: React.ReactNode\n}\n\nfunction FastImageBase({\n    source,\n    tintColor,\n    onLoadStart,\n    onProgress,\n    onLoad,\n    onError,\n    onLoadEnd,\n    style,\n    fallback,\n    children,\n    resizeMode = 'cover',\n    forwardedRef,\n    ...props\n}: FastImageProps & { forwardedRef: React.Ref<any> }) {\n    const resolvedSource = Image.resolveAssetSource(source as any)\n\n    if (fallback) {\n        return (\n            <View style={[styles.imageContainer, style]} ref={forwardedRef}>\n                <Image\n                    {...props}\n                    style={StyleSheet.absoluteFill}\n                    source={resolvedSource}\n                    onLoadStart={onLoadStart}\n                    onProgress={onProgress}\n                    onLoad={onLoad as any}\n                    onError={onError}\n                    onLoadEnd={onLoadEnd}\n                    resizeMode={resizeMode}\n                />\n                {children}\n            </View>\n        )\n    }\n\n    return (\n        <View style={[styles.imageContainer, style]} ref={forwardedRef}>\n            <FastImageView\n                {...props}\n                tintColor={tintColor}\n                style={StyleSheet.absoluteFill}\n                source={resolvedSource}\n                onFastImageLoadStart={onLoadStart}\n                onFastImageProgress={onProgress}\n                onFastImageLoad={onLoad}\n                onFastImageError={onError}\n                onFastImageLoadEnd={onLoadEnd}\n                resizeMode={resizeMode}\n            />\n            {children}\n        </View>\n    )\n}\n\nconst FastImageMemo = memo(FastImageBase)\n\nconst FastImageComponent: React.ComponentType<FastImageProps> = forwardRef(\n    (props: FastImageProps, ref: React.Ref<any>) => (\n        <FastImageMemo forwardedRef={ref} {...props} />\n    ),\n)\n\nFastImageComponent.displayName = 'FastImage'\n\ninterface FastImageStaticProperties {\n    resizeMode: typeof resizeMode\n    priority: typeof priority\n    cacheControl: typeof cacheControl\n    preload: (sources: Source[]) => void\n}\n\nconst FastImage: React.ComponentType<FastImageProps> &\n    FastImageStaticProperties = FastImageComponent as any\n\nFastImage.resizeMode = resizeMode\n\nFastImage.cacheControl = cacheControl\n\nFastImage.priority = priority\n\nFastImage.preload = (sources: Source[]) =>\n    FastImageViewNativeModule.preload(sources)\n\nconst styles = StyleSheet.create({\n    imageContainer: {\n        overflow: 'hidden',\n    },\n})\n\n// Types of requireNativeComponent are not correct.\nconst FastImageView = (requireNativeComponent as any)(\n    'FastImageView',\n    FastImage,\n    {\n        nativeOnly: {\n            onFastImageLoadStart: true,\n            onFastImageProgress: true,\n            onFastImageLoad: true,\n            onFastImageError: true,\n            onFastImageLoadEnd: true,\n        },\n    },\n)\n\nexport default FastImage\n"],"names":["FastImageViewNativeModule","NativeModules","FastImageView","resizeMode","contain","cover","stretch","center","priority","low","normal","high","cacheControl","immutable","web","cacheOnly","FastImageBase","source","tintColor","onLoadStart","onProgress","onLoad","onError","onLoadEnd","style","fallback","children","forwardedRef","props","resolvedSource","Image","resolveAssetSource","React","View","styles","imageContainer","ref","StyleSheet","absoluteFill","onFastImageLoadStart","onFastImageProgress","onFastImageLoad","onFastImageError","onFastImageLoadEnd","FastImageMemo","memo","FastImageComponent","forwardRef","displayName","FastImage","preload","sources","create","overflow","requireNativeComponent","nativeOnly"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"react-native-fast-image.cjs.development.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react'\nimport {\n    View,\n    Image,\n    NativeModules,\n    requireNativeComponent,\n    StyleSheet,\n    FlexStyle,\n    LayoutChangeEvent,\n    ShadowStyleIOS,\n    StyleProp,\n    TransformsStyle,\n} from 'react-native'\n\nconst FastImageViewNativeModule = NativeModules.FastImageView\n\ntype ResizeMode = 'contain' | 'cover' | 'stretch' | 'center'\n\nconst resizeMode = {\n    contain: 'contain',\n    cover: 'cover',\n    stretch: 'stretch',\n    center: 'center',\n} as const\n\ntype Priority = 'low' | 'normal' | 'high'\n\nconst priority = {\n    low: 'low',\n    normal: 'normal',\n    high: 'high',\n} as const\n\ntype Cache = 'low' | 'normal' | 'high'\n\nconst cacheControl = {\n    // Ignore headers, use uri as cache key, fetch only if not in cache.\n    immutable: 'immutable',\n    // Respect http headers, no aggressive caching.\n    web: 'web',\n    // Only load from cache.\n    cacheOnly: 'cacheOnly',\n} as const\n\nexport type Source = {\n    uri?: string\n    headers?: { [key: string]: string }\n    priority?: Priority\n    cache?: Cache\n}\n\nexport interface OnLoadEvent {\n    nativeEvent: {\n        width: number\n        height: number\n    }\n}\n\nexport interface OnProgressEvent {\n    nativeEvent: {\n        loaded: number\n        total: number\n    }\n}\n\nexport interface ImageStyle extends FlexStyle, TransformsStyle, ShadowStyleIOS {\n    backfaceVisibility?: 'visible' | 'hidden'\n    borderBottomLeftRadius?: number\n    borderBottomRightRadius?: number\n    backgroundColor?: string\n    borderColor?: string\n    borderWidth?: number\n    borderRadius?: number\n    borderTopLeftRadius?: number\n    borderTopRightRadius?: number\n    overlayColor?: string\n    tintColor?: string\n    opacity?: number\n}\n\nexport interface FastImageProps {\n    source: Source | number\n    resizeMode?: ResizeMode\n    fallback?: boolean\n\n    onLoadStart?(): void\n\n    onProgress?(event: OnProgressEvent): void\n\n    onLoad?(event: OnLoadEvent): void\n\n    onError?(): void\n\n    onLoadEnd?(): void\n\n    /**\n     * onLayout function\n     *\n     * Invoked on mount and layout changes with\n     *\n     * {nativeEvent: { layout: {x, y, width, height}}}.\n     */\n    onLayout?: (event: LayoutChangeEvent) => void\n\n    /**\n     *\n     * Style\n     */\n    style?: StyleProp<ImageStyle>\n\n    /**\n     * TintColor\n     *\n     * If supplied, changes the color of all the non-transparent pixels to the given color.\n     */\n\n    tintColor?: number | string\n\n    /**\n     * A unique identifier for this element to be used in UI Automation testing scripts.\n     */\n    testID?: string\n\n    /**\n     * Render children within the image.\n     */\n    children?: React.ReactNode\n}\n\nfunction FastImageBase({\n    source,\n    tintColor,\n    onLoadStart,\n    onProgress,\n    onLoad,\n    onError,\n    onLoadEnd,\n    style,\n    fallback,\n    children,\n    resizeMode = 'cover',\n    forwardedRef,\n    ...props\n}: FastImageProps & { forwardedRef: React.Ref<any> }) {\n    const resolvedSource = Image.resolveAssetSource(source as any)\n\n    if (fallback) {\n        return (\n            <View style={[styles.imageContainer, style]} ref={forwardedRef}>\n                <Image\n                    {...props}\n                    style={StyleSheet.absoluteFill}\n                    source={resolvedSource}\n                    onLoadStart={onLoadStart}\n                    onProgress={onProgress}\n                    onLoad={onLoad as any}\n                    onError={onError}\n                    onLoadEnd={onLoadEnd}\n                    resizeMode={resizeMode}\n                />\n                {children}\n            </View>\n        )\n    }\n\n    return (\n        <View style={[styles.imageContainer, style]} ref={forwardedRef}>\n            <FastImageView\n                {...props}\n                tintColor={tintColor}\n                style={StyleSheet.absoluteFill}\n                source={resolvedSource}\n                onFastImageLoadStart={onLoadStart}\n                onFastImageProgress={onProgress}\n                onFastImageLoad={onLoad}\n                onFastImageError={onError}\n                onFastImageLoadEnd={onLoadEnd}\n                resizeMode={resizeMode}\n            />\n            {children}\n        </View>\n    )\n}\n\nconst FastImageMemo = memo(FastImageBase)\n\nconst FastImageComponent: React.ComponentType<FastImageProps> = forwardRef(\n    (props: FastImageProps, ref: React.Ref<any>) => (\n        <FastImageMemo forwardedRef={ref} {...props} />\n    ),\n)\n\nFastImageComponent.displayName = 'FastImage'\n\ninterface FastImageStaticProperties {\n    resizeMode: typeof resizeMode\n    priority: typeof priority\n    cacheControl: typeof cacheControl\n    preload: (sources: Source[]) => void\n    clearMemoryCache: () => Promise<void>\n    clearDiskCache: () => Promise<void>\n}\n\nconst FastImage: React.ComponentType<FastImageProps> &\n    FastImageStaticProperties = FastImageComponent as any\n\nFastImage.resizeMode = resizeMode\n\nFastImage.cacheControl = cacheControl\n\nFastImage.priority = priority\n\nFastImage.preload = (sources: Source[]) =>\n    FastImageViewNativeModule.preload(sources)\n\nFastImage.clearMemoryCache = () => FastImageViewNativeModule.clearMemoryCache()\n\nFastImage.clearDiskCache = () => FastImageViewNativeModule.clearDiskCache()\n\nconst styles = StyleSheet.create({\n    imageContainer: {\n        overflow: 'hidden',\n    },\n})\n\n// Types of requireNativeComponent are not correct.\nconst FastImageView = (requireNativeComponent as any)(\n    'FastImageView',\n    FastImage,\n    {\n        nativeOnly: {\n            onFastImageLoadStart: true,\n            onFastImageProgress: true,\n            onFastImageLoad: true,\n            onFastImageError: true,\n            onFastImageLoadEnd: true,\n        },\n    },\n)\n\nexport default FastImage\n"],"names":["FastImageViewNativeModule","NativeModules","FastImageView","resizeMode","contain","cover","stretch","center","priority","low","normal","high","cacheControl","immutable","web","cacheOnly","FastImageBase","source","tintColor","onLoadStart","onProgress","onLoad","onError","onLoadEnd","style","fallback","children","forwardedRef","props","resolvedSource","Image","resolveAssetSource","React","View","styles","imageContainer","ref","StyleSheet","absoluteFill","onFastImageLoadStart","onFastImageProgress","onFastImageLoad","onFastImageError","onFastImageLoadEnd","FastImageMemo","memo","FastImageComponent","forwardRef","displayName","FastImage","preload","sources","clearMemoryCache","clearDiskCache","create","overflow","requireNativeComponent","nativeOnly"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/react-native-fast-image/dist/react-native-fast-image.cjs.production.min.js b/node_modules/react-native-fast-image/dist/react-native-fast-image.cjs.production.min.js
index 2c85f4e..384a685 100644
--- a/node_modules/react-native-fast-image/dist/react-native-fast-image.cjs.production.min.js
+++ b/node_modules/react-native-fast-image/dist/react-native-fast-image.cjs.production.min.js
@@ -1,2 +1,2 @@
-"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,o=require("react"),r=(e=o)&&"object"==typeof e&&"default"in e?e.default:e,a=require("react-native"),t=a.NativeModules.FastImageView;function n(e){var o=e.source,t=e.tintColor,n=e.onLoadStart,s=e.onProgress,l=e.onLoad,i=e.onError,m=e.onLoadEnd,u=e.style,g=e.fallback,f=e.children,v=e.resizeMode,h=void 0===v?"cover":v,y=e.forwardedRef,F=function(e,o){if(null==e)return{};var r,a,t={},n=Object.keys(e);for(a=0;a<n.length;a++)o.indexOf(r=n[a])>=0||(t[r]=e[r]);return t}(e,["source","tintColor","onLoadStart","onProgress","onLoad","onError","onLoadEnd","style","fallback","children","resizeMode","forwardedRef"]),I=a.Image.resolveAssetSource(o);return r.createElement(a.View,{style:[d.imageContainer,u],ref:y},g?r.createElement(a.Image,Object.assign({},F,{style:a.StyleSheet.absoluteFill,source:I,onLoadStart:n,onProgress:s,onLoad:l,onError:i,onLoadEnd:m,resizeMode:h})):r.createElement(c,Object.assign({},F,{tintColor:t,style:a.StyleSheet.absoluteFill,source:I,onFastImageLoadStart:n,onFastImageProgress:s,onFastImageLoad:l,onFastImageError:i,onFastImageLoadEnd:m,resizeMode:h})),f)}var s=o.memo(n),l=o.forwardRef((function(e,o){return r.createElement(s,Object.assign({forwardedRef:o},e))}));l.displayName="FastImage";var i=l;i.resizeMode={contain:"contain",cover:"cover",stretch:"stretch",center:"center"},i.cacheControl={immutable:"immutable",web:"web",cacheOnly:"cacheOnly"},i.priority={low:"low",normal:"normal",high:"high"},i.preload=function(e){return t.preload(e)};var d=a.StyleSheet.create({imageContainer:{overflow:"hidden"}}),c=a.requireNativeComponent("FastImageView",i,{nativeOnly:{onFastImageLoadStart:!0,onFastImageProgress:!0,onFastImageLoad:!0,onFastImageError:!0,onFastImageLoadEnd:!0}});exports.default=i;
+"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,r=require("react"),o=(e=r)&&"object"==typeof e&&"default"in e?e.default:e,a=require("react-native"),t=a.NativeModules.FastImageView;function n(e){var r=e.source,t=e.tintColor,n=e.onLoadStart,s=e.onProgress,l=e.onLoad,i=e.onError,m=e.onLoadEnd,u=e.style,g=e.fallback,f=e.children,h=e.resizeMode,y=void 0===h?"cover":h,v=e.forwardedRef,F=function(e,r){if(null==e)return{};var o,a,t={},n=Object.keys(e);for(a=0;a<n.length;a++)r.indexOf(o=n[a])>=0||(t[o]=e[o]);return t}(e,["source","tintColor","onLoadStart","onProgress","onLoad","onError","onLoadEnd","style","fallback","children","resizeMode","forwardedRef"]),I=a.Image.resolveAssetSource(r);return o.createElement(a.View,{style:[c.imageContainer,u],ref:v},g?o.createElement(a.Image,Object.assign({},F,{style:a.StyleSheet.absoluteFill,source:I,onLoadStart:n,onProgress:s,onLoad:l,onError:i,onLoadEnd:m,resizeMode:y})):o.createElement(d,Object.assign({},F,{tintColor:t,style:a.StyleSheet.absoluteFill,source:I,onFastImageLoadStart:n,onFastImageProgress:s,onFastImageLoad:l,onFastImageError:i,onFastImageLoadEnd:m,resizeMode:y})),f)}var s=r.memo(n),l=r.forwardRef((function(e,r){return o.createElement(s,Object.assign({forwardedRef:r},e))}));l.displayName="FastImage";var i=l;i.resizeMode={contain:"contain",cover:"cover",stretch:"stretch",center:"center"},i.cacheControl={immutable:"immutable",web:"web",cacheOnly:"cacheOnly"},i.priority={low:"low",normal:"normal",high:"high"},i.preload=function(e){return t.preload(e)},i.clearMemoryCache=function(){return t.clearMemoryCache()},i.clearDiskCache=function(){return t.clearDiskCache()};var c=a.StyleSheet.create({imageContainer:{overflow:"hidden"}}),d=a.requireNativeComponent("FastImageView",i,{nativeOnly:{onFastImageLoadStart:!0,onFastImageProgress:!0,onFastImageLoad:!0,onFastImageError:!0,onFastImageLoadEnd:!0}});exports.default=i;
 //# sourceMappingURL=react-native-fast-image.cjs.production.min.js.map
diff --git a/node_modules/react-native-fast-image/dist/react-native-fast-image.cjs.production.min.js.map b/node_modules/react-native-fast-image/dist/react-native-fast-image.cjs.production.min.js.map
index 0a38de5..6a9de91 100644
--- a/node_modules/react-native-fast-image/dist/react-native-fast-image.cjs.production.min.js.map
+++ b/node_modules/react-native-fast-image/dist/react-native-fast-image.cjs.production.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"react-native-fast-image.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react'\nimport {\n    View,\n    Image,\n    NativeModules,\n    requireNativeComponent,\n    StyleSheet,\n    FlexStyle,\n    LayoutChangeEvent,\n    ShadowStyleIOS,\n    StyleProp,\n    TransformsStyle,\n} from 'react-native'\n\nconst FastImageViewNativeModule = NativeModules.FastImageView\n\ntype ResizeMode = 'contain' | 'cover' | 'stretch' | 'center'\n\nconst resizeMode = {\n    contain: 'contain',\n    cover: 'cover',\n    stretch: 'stretch',\n    center: 'center',\n} as const\n\ntype Priority = 'low' | 'normal' | 'high'\n\nconst priority = {\n    low: 'low',\n    normal: 'normal',\n    high: 'high',\n} as const\n\ntype Cache = 'low' | 'normal' | 'high'\n\nconst cacheControl = {\n    // Ignore headers, use uri as cache key, fetch only if not in cache.\n    immutable: 'immutable',\n    // Respect http headers, no aggressive caching.\n    web: 'web',\n    // Only load from cache.\n    cacheOnly: 'cacheOnly',\n} as const\n\nexport type Source = {\n    uri?: string\n    headers?: { [key: string]: string }\n    priority?: Priority\n    cache?: Cache\n}\n\nexport interface OnLoadEvent {\n    nativeEvent: {\n        width: number\n        height: number\n    }\n}\n\nexport interface OnProgressEvent {\n    nativeEvent: {\n        loaded: number\n        total: number\n    }\n}\n\nexport interface ImageStyle extends FlexStyle, TransformsStyle, ShadowStyleIOS {\n    backfaceVisibility?: 'visible' | 'hidden'\n    borderBottomLeftRadius?: number\n    borderBottomRightRadius?: number\n    backgroundColor?: string\n    borderColor?: string\n    borderWidth?: number\n    borderRadius?: number\n    borderTopLeftRadius?: number\n    borderTopRightRadius?: number\n    overlayColor?: string\n    tintColor?: string\n    opacity?: number\n}\n\nexport interface FastImageProps {\n    source: Source | number\n    resizeMode?: ResizeMode\n    fallback?: boolean\n\n    onLoadStart?(): void\n\n    onProgress?(event: OnProgressEvent): void\n\n    onLoad?(event: OnLoadEvent): void\n\n    onError?(): void\n\n    onLoadEnd?(): void\n\n    /**\n     * onLayout function\n     *\n     * Invoked on mount and layout changes with\n     *\n     * {nativeEvent: { layout: {x, y, width, height}}}.\n     */\n    onLayout?: (event: LayoutChangeEvent) => void\n\n    /**\n     *\n     * Style\n     */\n    style?: StyleProp<ImageStyle>\n\n    /**\n     * TintColor\n     *\n     * If supplied, changes the color of all the non-transparent pixels to the given color.\n     */\n\n    tintColor?: number | string\n\n    /**\n     * A unique identifier for this element to be used in UI Automation testing scripts.\n     */\n    testID?: string\n\n    /**\n     * Render children within the image.\n     */\n    children?: React.ReactNode\n}\n\nfunction FastImageBase({\n    source,\n    tintColor,\n    onLoadStart,\n    onProgress,\n    onLoad,\n    onError,\n    onLoadEnd,\n    style,\n    fallback,\n    children,\n    resizeMode = 'cover',\n    forwardedRef,\n    ...props\n}: FastImageProps & { forwardedRef: React.Ref<any> }) {\n    const resolvedSource = Image.resolveAssetSource(source as any)\n\n    if (fallback) {\n        return (\n            <View style={[styles.imageContainer, style]} ref={forwardedRef}>\n                <Image\n                    {...props}\n                    style={StyleSheet.absoluteFill}\n                    source={resolvedSource}\n                    onLoadStart={onLoadStart}\n                    onProgress={onProgress}\n                    onLoad={onLoad as any}\n                    onError={onError}\n                    onLoadEnd={onLoadEnd}\n                    resizeMode={resizeMode}\n                />\n                {children}\n            </View>\n        )\n    }\n\n    return (\n        <View style={[styles.imageContainer, style]} ref={forwardedRef}>\n            <FastImageView\n                {...props}\n                tintColor={tintColor}\n                style={StyleSheet.absoluteFill}\n                source={resolvedSource}\n                onFastImageLoadStart={onLoadStart}\n                onFastImageProgress={onProgress}\n                onFastImageLoad={onLoad}\n                onFastImageError={onError}\n                onFastImageLoadEnd={onLoadEnd}\n                resizeMode={resizeMode}\n            />\n            {children}\n        </View>\n    )\n}\n\nconst FastImageMemo = memo(FastImageBase)\n\nconst FastImageComponent: React.ComponentType<FastImageProps> = forwardRef(\n    (props: FastImageProps, ref: React.Ref<any>) => (\n        <FastImageMemo forwardedRef={ref} {...props} />\n    ),\n)\n\nFastImageComponent.displayName = 'FastImage'\n\ninterface FastImageStaticProperties {\n    resizeMode: typeof resizeMode\n    priority: typeof priority\n    cacheControl: typeof cacheControl\n    preload: (sources: Source[]) => void\n}\n\nconst FastImage: React.ComponentType<FastImageProps> &\n    FastImageStaticProperties = FastImageComponent as any\n\nFastImage.resizeMode = resizeMode\n\nFastImage.cacheControl = cacheControl\n\nFastImage.priority = priority\n\nFastImage.preload = (sources: Source[]) =>\n    FastImageViewNativeModule.preload(sources)\n\nconst styles = StyleSheet.create({\n    imageContainer: {\n        overflow: 'hidden',\n    },\n})\n\n// Types of requireNativeComponent are not correct.\nconst FastImageView = (requireNativeComponent as any)(\n    'FastImageView',\n    FastImage,\n    {\n        nativeOnly: {\n            onFastImageLoadStart: true,\n            onFastImageProgress: true,\n            onFastImageLoad: true,\n            onFastImageError: true,\n            onFastImageLoadEnd: true,\n        },\n    },\n)\n\nexport default FastImage\n"],"names":["FastImageViewNativeModule","NativeModules","FastImageView","FastImageBase","source","tintColor","onLoadStart","onProgress","onLoad","onError","onLoadEnd","style","fallback","children","resizeMode","forwardedRef","props","resolvedSource","Image","resolveAssetSource","React","View","styles","imageContainer","ref","StyleSheet","absoluteFill","onFastImageLoadStart","onFastImageProgress","onFastImageLoad","onFastImageError","onFastImageLoadEnd","FastImageMemo","memo","FastImageComponent","forwardRef","displayName","FastImage","contain","cover","stretch","center","cacheControl","immutable","web","cacheOnly","priority","low","normal","high","preload","sources","create","overflow","requireNativeComponent","nativeOnly"],"mappings":"8KAcMA,EAA4BC,gBAAcC,cAmHhD,SAASC,SACLC,IAAAA,OACAC,IAAAA,UACAC,IAAAA,YACAC,IAAAA,WACAC,IAAAA,OACAC,IAAAA,QACAC,IAAAA,UACAC,IAAAA,MACAC,IAAAA,SACAC,IAAAA,aACAC,WAAAA,aAAa,UACbC,IAAAA,aACGC,mRAEGC,EAAiBC,QAAMC,mBAAmBf,UAIxCgB,gBAACC,QAAKV,MAAO,CAACW,EAAOC,eAAgBZ,GAAQa,IAAKT,GAFtDH,EAGQQ,gBAACF,yBACOF,GACJL,MAAOc,aAAWC,aAClBtB,OAAQa,EACRX,YAAaA,EACbC,WAAYA,EACZC,OAAQA,EACRC,QAASA,EACTC,UAAWA,EACXI,WAAYA,KASpBM,gBAAClB,mBACOc,GACJX,UAAWA,EACXM,MAAOc,aAAWC,aAClBtB,OAAQa,EACRU,qBAAsBrB,EACtBsB,oBAAqBrB,EACrBsB,gBAAiBrB,EACjBsB,iBAAkBrB,EAClBsB,mBAAoBrB,EACpBI,WAAYA,KAjBXD,GAwBjB,IAAMmB,EAAgBC,OAAK9B,GAErB+B,EAA0DC,cAC5D,SAACnB,EAAuBQ,UACpBJ,gBAACY,iBAAcjB,aAAcS,GAASR,OAI9CkB,EAAmBE,YAAc,YASjC,IAAMC,EAC0BH,EAEhCG,EAAUvB,WA1LS,CACfwB,QAAS,UACTC,MAAO,QACPC,QAAS,UACTC,OAAQ,UAwLZJ,EAAUK,aA3KW,CAEjBC,UAAW,YAEXC,IAAK,MAELC,UAAW,aAuKfR,EAAUS,SArLO,CACbC,IAAK,MACLC,OAAQ,SACRC,KAAM,QAoLVZ,EAAUa,QAAU,SAACC,UACjBnD,EAA0BkD,QAAQC,IAEtC,IAAM7B,EAASG,aAAW2B,OAAO,CAC7B7B,eAAgB,CACZ8B,SAAU,YAKZnD,EAAiBoD,yBACnB,gBACAjB,EACA,CACIkB,WAAY,CACR5B,sBAAsB,EACtBC,qBAAqB,EACrBC,iBAAiB,EACjBC,kBAAkB,EAClBC,oBAAoB"}
\ No newline at end of file
+{"version":3,"file":"react-native-fast-image.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react'\nimport {\n    View,\n    Image,\n    NativeModules,\n    requireNativeComponent,\n    StyleSheet,\n    FlexStyle,\n    LayoutChangeEvent,\n    ShadowStyleIOS,\n    StyleProp,\n    TransformsStyle,\n} from 'react-native'\n\nconst FastImageViewNativeModule = NativeModules.FastImageView\n\ntype ResizeMode = 'contain' | 'cover' | 'stretch' | 'center'\n\nconst resizeMode = {\n    contain: 'contain',\n    cover: 'cover',\n    stretch: 'stretch',\n    center: 'center',\n} as const\n\ntype Priority = 'low' | 'normal' | 'high'\n\nconst priority = {\n    low: 'low',\n    normal: 'normal',\n    high: 'high',\n} as const\n\ntype Cache = 'low' | 'normal' | 'high'\n\nconst cacheControl = {\n    // Ignore headers, use uri as cache key, fetch only if not in cache.\n    immutable: 'immutable',\n    // Respect http headers, no aggressive caching.\n    web: 'web',\n    // Only load from cache.\n    cacheOnly: 'cacheOnly',\n} as const\n\nexport type Source = {\n    uri?: string\n    headers?: { [key: string]: string }\n    priority?: Priority\n    cache?: Cache\n}\n\nexport interface OnLoadEvent {\n    nativeEvent: {\n        width: number\n        height: number\n    }\n}\n\nexport interface OnProgressEvent {\n    nativeEvent: {\n        loaded: number\n        total: number\n    }\n}\n\nexport interface ImageStyle extends FlexStyle, TransformsStyle, ShadowStyleIOS {\n    backfaceVisibility?: 'visible' | 'hidden'\n    borderBottomLeftRadius?: number\n    borderBottomRightRadius?: number\n    backgroundColor?: string\n    borderColor?: string\n    borderWidth?: number\n    borderRadius?: number\n    borderTopLeftRadius?: number\n    borderTopRightRadius?: number\n    overlayColor?: string\n    tintColor?: string\n    opacity?: number\n}\n\nexport interface FastImageProps {\n    source: Source | number\n    resizeMode?: ResizeMode\n    fallback?: boolean\n\n    onLoadStart?(): void\n\n    onProgress?(event: OnProgressEvent): void\n\n    onLoad?(event: OnLoadEvent): void\n\n    onError?(): void\n\n    onLoadEnd?(): void\n\n    /**\n     * onLayout function\n     *\n     * Invoked on mount and layout changes with\n     *\n     * {nativeEvent: { layout: {x, y, width, height}}}.\n     */\n    onLayout?: (event: LayoutChangeEvent) => void\n\n    /**\n     *\n     * Style\n     */\n    style?: StyleProp<ImageStyle>\n\n    /**\n     * TintColor\n     *\n     * If supplied, changes the color of all the non-transparent pixels to the given color.\n     */\n\n    tintColor?: number | string\n\n    /**\n     * A unique identifier for this element to be used in UI Automation testing scripts.\n     */\n    testID?: string\n\n    /**\n     * Render children within the image.\n     */\n    children?: React.ReactNode\n}\n\nfunction FastImageBase({\n    source,\n    tintColor,\n    onLoadStart,\n    onProgress,\n    onLoad,\n    onError,\n    onLoadEnd,\n    style,\n    fallback,\n    children,\n    resizeMode = 'cover',\n    forwardedRef,\n    ...props\n}: FastImageProps & { forwardedRef: React.Ref<any> }) {\n    const resolvedSource = Image.resolveAssetSource(source as any)\n\n    if (fallback) {\n        return (\n            <View style={[styles.imageContainer, style]} ref={forwardedRef}>\n                <Image\n                    {...props}\n                    style={StyleSheet.absoluteFill}\n                    source={resolvedSource}\n                    onLoadStart={onLoadStart}\n                    onProgress={onProgress}\n                    onLoad={onLoad as any}\n                    onError={onError}\n                    onLoadEnd={onLoadEnd}\n                    resizeMode={resizeMode}\n                />\n                {children}\n            </View>\n        )\n    }\n\n    return (\n        <View style={[styles.imageContainer, style]} ref={forwardedRef}>\n            <FastImageView\n                {...props}\n                tintColor={tintColor}\n                style={StyleSheet.absoluteFill}\n                source={resolvedSource}\n                onFastImageLoadStart={onLoadStart}\n                onFastImageProgress={onProgress}\n                onFastImageLoad={onLoad}\n                onFastImageError={onError}\n                onFastImageLoadEnd={onLoadEnd}\n                resizeMode={resizeMode}\n            />\n            {children}\n        </View>\n    )\n}\n\nconst FastImageMemo = memo(FastImageBase)\n\nconst FastImageComponent: React.ComponentType<FastImageProps> = forwardRef(\n    (props: FastImageProps, ref: React.Ref<any>) => (\n        <FastImageMemo forwardedRef={ref} {...props} />\n    ),\n)\n\nFastImageComponent.displayName = 'FastImage'\n\ninterface FastImageStaticProperties {\n    resizeMode: typeof resizeMode\n    priority: typeof priority\n    cacheControl: typeof cacheControl\n    preload: (sources: Source[]) => void\n    clearMemoryCache: () => Promise<void>\n    clearDiskCache: () => Promise<void>\n}\n\nconst FastImage: React.ComponentType<FastImageProps> &\n    FastImageStaticProperties = FastImageComponent as any\n\nFastImage.resizeMode = resizeMode\n\nFastImage.cacheControl = cacheControl\n\nFastImage.priority = priority\n\nFastImage.preload = (sources: Source[]) =>\n    FastImageViewNativeModule.preload(sources)\n\nFastImage.clearMemoryCache = () => FastImageViewNativeModule.clearMemoryCache()\n\nFastImage.clearDiskCache = () => FastImageViewNativeModule.clearDiskCache()\n\nconst styles = StyleSheet.create({\n    imageContainer: {\n        overflow: 'hidden',\n    },\n})\n\n// Types of requireNativeComponent are not correct.\nconst FastImageView = (requireNativeComponent as any)(\n    'FastImageView',\n    FastImage,\n    {\n        nativeOnly: {\n            onFastImageLoadStart: true,\n            onFastImageProgress: true,\n            onFastImageLoad: true,\n            onFastImageError: true,\n            onFastImageLoadEnd: true,\n        },\n    },\n)\n\nexport default FastImage\n"],"names":["FastImageViewNativeModule","NativeModules","FastImageView","FastImageBase","source","tintColor","onLoadStart","onProgress","onLoad","onError","onLoadEnd","style","fallback","children","resizeMode","forwardedRef","props","resolvedSource","Image","resolveAssetSource","React","View","styles","imageContainer","ref","StyleSheet","absoluteFill","onFastImageLoadStart","onFastImageProgress","onFastImageLoad","onFastImageError","onFastImageLoadEnd","FastImageMemo","memo","FastImageComponent","forwardRef","displayName","FastImage","contain","cover","stretch","center","cacheControl","immutable","web","cacheOnly","priority","low","normal","high","preload","sources","clearMemoryCache","clearDiskCache","create","overflow","requireNativeComponent","nativeOnly"],"mappings":"8KAcMA,EAA4BC,gBAAcC,cAmHhD,SAASC,SACLC,IAAAA,OACAC,IAAAA,UACAC,IAAAA,YACAC,IAAAA,WACAC,IAAAA,OACAC,IAAAA,QACAC,IAAAA,UACAC,IAAAA,MACAC,IAAAA,SACAC,IAAAA,aACAC,WAAAA,aAAa,UACbC,IAAAA,aACGC,mRAEGC,EAAiBC,QAAMC,mBAAmBf,UAIxCgB,gBAACC,QAAKV,MAAO,CAACW,EAAOC,eAAgBZ,GAAQa,IAAKT,GAFtDH,EAGQQ,gBAACF,yBACOF,GACJL,MAAOc,aAAWC,aAClBtB,OAAQa,EACRX,YAAaA,EACbC,WAAYA,EACZC,OAAQA,EACRC,QAASA,EACTC,UAAWA,EACXI,WAAYA,KASpBM,gBAAClB,mBACOc,GACJX,UAAWA,EACXM,MAAOc,aAAWC,aAClBtB,OAAQa,EACRU,qBAAsBrB,EACtBsB,oBAAqBrB,EACrBsB,gBAAiBrB,EACjBsB,iBAAkBrB,EAClBsB,mBAAoBrB,EACpBI,WAAYA,KAjBXD,GAwBjB,IAAMmB,EAAgBC,OAAK9B,GAErB+B,EAA0DC,cAC5D,SAACnB,EAAuBQ,UACpBJ,gBAACY,iBAAcjB,aAAcS,GAASR,OAI9CkB,EAAmBE,YAAc,YAWjC,IAAMC,EAC0BH,EAEhCG,EAAUvB,WA5LS,CACfwB,QAAS,UACTC,MAAO,QACPC,QAAS,UACTC,OAAQ,UA0LZJ,EAAUK,aA7KW,CAEjBC,UAAW,YAEXC,IAAK,MAELC,UAAW,aAyKfR,EAAUS,SAvLO,CACbC,IAAK,MACLC,OAAQ,SACRC,KAAM,QAsLVZ,EAAUa,QAAU,SAACC,UACjBnD,EAA0BkD,QAAQC,IAEtCd,EAAUe,iBAAmB,kBAAMpD,EAA0BoD,oBAE7Df,EAAUgB,eAAiB,kBAAMrD,EAA0BqD,kBAE3D,IAAM/B,EAASG,aAAW6B,OAAO,CAC7B/B,eAAgB,CACZgC,SAAU,YAKZrD,EAAiBsD,yBACnB,gBACAnB,EACA,CACIoB,WAAY,CACR9B,sBAAsB,EACtBC,qBAAqB,EACrBC,iBAAiB,EACjBC,kBAAkB,EAClBC,oBAAoB"}
\ No newline at end of file
diff --git a/node_modules/react-native-fast-image/dist/react-native-fast-image.esm.js b/node_modules/react-native-fast-image/dist/react-native-fast-image.esm.js
index 77bd06e..e5d133b 100644
--- a/node_modules/react-native-fast-image/dist/react-native-fast-image.esm.js
+++ b/node_modules/react-native-fast-image/dist/react-native-fast-image.esm.js
@@ -103,6 +103,14 @@ FastImage.preload = function (sources) {
   return FastImageViewNativeModule.preload(sources);
 };
 
+FastImage.clearMemoryCache = function () {
+  return FastImageViewNativeModule.clearMemoryCache();
+};
+
+FastImage.clearDiskCache = function () {
+  return FastImageViewNativeModule.clearDiskCache();
+};
+
 var styles = /*#__PURE__*/StyleSheet.create({
   imageContainer: {
     overflow: 'hidden'
diff --git a/node_modules/react-native-fast-image/dist/react-native-fast-image.esm.js.map b/node_modules/react-native-fast-image/dist/react-native-fast-image.esm.js.map
index 8d997c1..168c312 100644
--- a/node_modules/react-native-fast-image/dist/react-native-fast-image.esm.js.map
+++ b/node_modules/react-native-fast-image/dist/react-native-fast-image.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"react-native-fast-image.esm.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react'\nimport {\n    View,\n    Image,\n    NativeModules,\n    requireNativeComponent,\n    StyleSheet,\n    FlexStyle,\n    LayoutChangeEvent,\n    ShadowStyleIOS,\n    StyleProp,\n    TransformsStyle,\n} from 'react-native'\n\nconst FastImageViewNativeModule = NativeModules.FastImageView\n\ntype ResizeMode = 'contain' | 'cover' | 'stretch' | 'center'\n\nconst resizeMode = {\n    contain: 'contain',\n    cover: 'cover',\n    stretch: 'stretch',\n    center: 'center',\n} as const\n\ntype Priority = 'low' | 'normal' | 'high'\n\nconst priority = {\n    low: 'low',\n    normal: 'normal',\n    high: 'high',\n} as const\n\ntype Cache = 'low' | 'normal' | 'high'\n\nconst cacheControl = {\n    // Ignore headers, use uri as cache key, fetch only if not in cache.\n    immutable: 'immutable',\n    // Respect http headers, no aggressive caching.\n    web: 'web',\n    // Only load from cache.\n    cacheOnly: 'cacheOnly',\n} as const\n\nexport type Source = {\n    uri?: string\n    headers?: { [key: string]: string }\n    priority?: Priority\n    cache?: Cache\n}\n\nexport interface OnLoadEvent {\n    nativeEvent: {\n        width: number\n        height: number\n    }\n}\n\nexport interface OnProgressEvent {\n    nativeEvent: {\n        loaded: number\n        total: number\n    }\n}\n\nexport interface ImageStyle extends FlexStyle, TransformsStyle, ShadowStyleIOS {\n    backfaceVisibility?: 'visible' | 'hidden'\n    borderBottomLeftRadius?: number\n    borderBottomRightRadius?: number\n    backgroundColor?: string\n    borderColor?: string\n    borderWidth?: number\n    borderRadius?: number\n    borderTopLeftRadius?: number\n    borderTopRightRadius?: number\n    overlayColor?: string\n    tintColor?: string\n    opacity?: number\n}\n\nexport interface FastImageProps {\n    source: Source | number\n    resizeMode?: ResizeMode\n    fallback?: boolean\n\n    onLoadStart?(): void\n\n    onProgress?(event: OnProgressEvent): void\n\n    onLoad?(event: OnLoadEvent): void\n\n    onError?(): void\n\n    onLoadEnd?(): void\n\n    /**\n     * onLayout function\n     *\n     * Invoked on mount and layout changes with\n     *\n     * {nativeEvent: { layout: {x, y, width, height}}}.\n     */\n    onLayout?: (event: LayoutChangeEvent) => void\n\n    /**\n     *\n     * Style\n     */\n    style?: StyleProp<ImageStyle>\n\n    /**\n     * TintColor\n     *\n     * If supplied, changes the color of all the non-transparent pixels to the given color.\n     */\n\n    tintColor?: number | string\n\n    /**\n     * A unique identifier for this element to be used in UI Automation testing scripts.\n     */\n    testID?: string\n\n    /**\n     * Render children within the image.\n     */\n    children?: React.ReactNode\n}\n\nfunction FastImageBase({\n    source,\n    tintColor,\n    onLoadStart,\n    onProgress,\n    onLoad,\n    onError,\n    onLoadEnd,\n    style,\n    fallback,\n    children,\n    resizeMode = 'cover',\n    forwardedRef,\n    ...props\n}: FastImageProps & { forwardedRef: React.Ref<any> }) {\n    const resolvedSource = Image.resolveAssetSource(source as any)\n\n    if (fallback) {\n        return (\n            <View style={[styles.imageContainer, style]} ref={forwardedRef}>\n                <Image\n                    {...props}\n                    style={StyleSheet.absoluteFill}\n                    source={resolvedSource}\n                    onLoadStart={onLoadStart}\n                    onProgress={onProgress}\n                    onLoad={onLoad as any}\n                    onError={onError}\n                    onLoadEnd={onLoadEnd}\n                    resizeMode={resizeMode}\n                />\n                {children}\n            </View>\n        )\n    }\n\n    return (\n        <View style={[styles.imageContainer, style]} ref={forwardedRef}>\n            <FastImageView\n                {...props}\n                tintColor={tintColor}\n                style={StyleSheet.absoluteFill}\n                source={resolvedSource}\n                onFastImageLoadStart={onLoadStart}\n                onFastImageProgress={onProgress}\n                onFastImageLoad={onLoad}\n                onFastImageError={onError}\n                onFastImageLoadEnd={onLoadEnd}\n                resizeMode={resizeMode}\n            />\n            {children}\n        </View>\n    )\n}\n\nconst FastImageMemo = memo(FastImageBase)\n\nconst FastImageComponent: React.ComponentType<FastImageProps> = forwardRef(\n    (props: FastImageProps, ref: React.Ref<any>) => (\n        <FastImageMemo forwardedRef={ref} {...props} />\n    ),\n)\n\nFastImageComponent.displayName = 'FastImage'\n\ninterface FastImageStaticProperties {\n    resizeMode: typeof resizeMode\n    priority: typeof priority\n    cacheControl: typeof cacheControl\n    preload: (sources: Source[]) => void\n}\n\nconst FastImage: React.ComponentType<FastImageProps> &\n    FastImageStaticProperties = FastImageComponent as any\n\nFastImage.resizeMode = resizeMode\n\nFastImage.cacheControl = cacheControl\n\nFastImage.priority = priority\n\nFastImage.preload = (sources: Source[]) =>\n    FastImageViewNativeModule.preload(sources)\n\nconst styles = StyleSheet.create({\n    imageContainer: {\n        overflow: 'hidden',\n    },\n})\n\n// Types of requireNativeComponent are not correct.\nconst FastImageView = (requireNativeComponent as any)(\n    'FastImageView',\n    FastImage,\n    {\n        nativeOnly: {\n            onFastImageLoadStart: true,\n            onFastImageProgress: true,\n            onFastImageLoad: true,\n            onFastImageError: true,\n            onFastImageLoadEnd: true,\n        },\n    },\n)\n\nexport default FastImage\n"],"names":["FastImageViewNativeModule","NativeModules","FastImageView","resizeMode","contain","cover","stretch","center","priority","low","normal","high","cacheControl","immutable","web","cacheOnly","FastImageBase","source","tintColor","onLoadStart","onProgress","onLoad","onError","onLoadEnd","style","fallback","children","forwardedRef","props","resolvedSource","Image","resolveAssetSource","React","View","styles","imageContainer","ref","StyleSheet","absoluteFill","onFastImageLoadStart","onFastImageProgress","onFastImageLoad","onFastImageError","onFastImageLoadEnd","FastImageMemo","memo","FastImageComponent","forwardRef","displayName","FastImage","preload","sources","create","overflow","requireNativeComponent","nativeOnly"],"mappings":";;;;;;;;;;;;;;;;;;AAcA,IAAMA,yBAAyB,GAAGC,aAAa,CAACC,aAAhD;AAIA,IAAMC,UAAU,GAAG;AACfC,EAAAA,OAAO,EAAE,SADM;AAEfC,EAAAA,KAAK,EAAE,OAFQ;AAGfC,EAAAA,OAAO,EAAE,SAHM;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;AASA,IAAMC,QAAQ,GAAG;AACbC,EAAAA,GAAG,EAAE,KADQ;AAEbC,EAAAA,MAAM,EAAE,QAFK;AAGbC,EAAAA,IAAI,EAAE;AAHO,CAAjB;AAQA,IAAMC,YAAY,GAAG;AACjB;AACAC,EAAAA,SAAS,EAAE,WAFM;AAGjB;AACAC,EAAAA,GAAG,EAAE,KAJY;AAKjB;AACAC,EAAAA,SAAS,EAAE;AANM,CAArB;;AA8FA,SAASC,aAAT;MACIC,cAAAA;MACAC,iBAAAA;MACAC,mBAAAA;MACAC,kBAAAA;MACAC,cAAAA;MACAC,eAAAA;MACAC,iBAAAA;MACAC,aAAAA;MACAC,gBAAAA;MACAC,gBAAAA;6BACAvB;MAAAA,0CAAa;MACbwB,oBAAAA;MACGC;;AAEH,MAAMC,cAAc,GAAGC,KAAK,CAACC,kBAAN,CAAyBd,MAAzB,CAAvB;;AAEA,MAAIQ,QAAJ,EAAc;AACV,WACIO,mBAAA,CAACC,IAAD;AAAMT,MAAAA,KAAK,EAAE,CAACU,MAAM,CAACC,cAAR,EAAwBX,KAAxB;AAAgCY,MAAAA,GAAG,EAAET;KAAlD,EACIK,mBAAA,CAACF,KAAD,oBACQF;AACJJ,MAAAA,KAAK,EAAEa,UAAU,CAACC;AAClBrB,MAAAA,MAAM,EAAEY;AACRV,MAAAA,WAAW,EAAEA;AACbC,MAAAA,UAAU,EAAEA;AACZC,MAAAA,MAAM,EAAEA;AACRC,MAAAA,OAAO,EAAEA;AACTC,MAAAA,SAAS,EAAEA;AACXpB,MAAAA,UAAU,EAAEA;MAThB,CADJ,EAYKuB,QAZL,CADJ;AAgBH;;AAED,SACIM,mBAAA,CAACC,IAAD;AAAMT,IAAAA,KAAK,EAAE,CAACU,MAAM,CAACC,cAAR,EAAwBX,KAAxB;AAAgCY,IAAAA,GAAG,EAAET;GAAlD,EACIK,mBAAA,CAAC9B,aAAD,oBACQ0B;AACJV,IAAAA,SAAS,EAAEA;AACXM,IAAAA,KAAK,EAAEa,UAAU,CAACC;AAClBrB,IAAAA,MAAM,EAAEY;AACRU,IAAAA,oBAAoB,EAAEpB;AACtBqB,IAAAA,mBAAmB,EAAEpB;AACrBqB,IAAAA,eAAe,EAAEpB;AACjBqB,IAAAA,gBAAgB,EAAEpB;AAClBqB,IAAAA,kBAAkB,EAAEpB;AACpBpB,IAAAA,UAAU,EAAEA;IAVhB,CADJ,EAaKuB,QAbL,CADJ;AAiBH;;AAED,IAAMkB,aAAa,gBAAGC,IAAI,CAAC7B,aAAD,CAA1B;AAEA,IAAM8B,kBAAkB,gBAAwCC,UAAU,CACtE,UAACnB,KAAD,EAAwBQ,GAAxB;AAAA,SACIJ,mBAAA,CAACY,aAAD;AAAejB,IAAAA,YAAY,EAAES;KAASR,MAAtC,CADJ;AAAA,CADsE,CAA1E;AAMAkB,kBAAkB,CAACE,WAAnB,GAAiC,WAAjC;AASA,IAAMC,SAAS,GACiBH,kBADhC;AAGAG,SAAS,CAAC9C,UAAV,GAAuBA,UAAvB;AAEA8C,SAAS,CAACrC,YAAV,GAAyBA,YAAzB;AAEAqC,SAAS,CAACzC,QAAV,GAAqBA,QAArB;;AAEAyC,SAAS,CAACC,OAAV,GAAoB,UAACC,OAAD;AAAA,SAChBnD,yBAAyB,CAACkD,OAA1B,CAAkCC,OAAlC,CADgB;AAAA,CAApB;;AAGA,IAAMjB,MAAM,gBAAGG,UAAU,CAACe,MAAX,CAAkB;AAC7BjB,EAAAA,cAAc,EAAE;AACZkB,IAAAA,QAAQ,EAAE;AADE;AADa,CAAlB,CAAf;;AAOA,IAAMnD,aAAa,gBAAIoD,sBAA8B,CACjD,eADiD,EAEjDL,SAFiD,EAGjD;AACIM,EAAAA,UAAU,EAAE;AACRhB,IAAAA,oBAAoB,EAAE,IADd;AAERC,IAAAA,mBAAmB,EAAE,IAFb;AAGRC,IAAAA,eAAe,EAAE,IAHT;AAIRC,IAAAA,gBAAgB,EAAE,IAJV;AAKRC,IAAAA,kBAAkB,EAAE;AALZ;AADhB,CAHiD,CAArD;;;;"}
\ No newline at end of file
+{"version":3,"file":"react-native-fast-image.esm.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react'\nimport {\n    View,\n    Image,\n    NativeModules,\n    requireNativeComponent,\n    StyleSheet,\n    FlexStyle,\n    LayoutChangeEvent,\n    ShadowStyleIOS,\n    StyleProp,\n    TransformsStyle,\n} from 'react-native'\n\nconst FastImageViewNativeModule = NativeModules.FastImageView\n\ntype ResizeMode = 'contain' | 'cover' | 'stretch' | 'center'\n\nconst resizeMode = {\n    contain: 'contain',\n    cover: 'cover',\n    stretch: 'stretch',\n    center: 'center',\n} as const\n\ntype Priority = 'low' | 'normal' | 'high'\n\nconst priority = {\n    low: 'low',\n    normal: 'normal',\n    high: 'high',\n} as const\n\ntype Cache = 'low' | 'normal' | 'high'\n\nconst cacheControl = {\n    // Ignore headers, use uri as cache key, fetch only if not in cache.\n    immutable: 'immutable',\n    // Respect http headers, no aggressive caching.\n    web: 'web',\n    // Only load from cache.\n    cacheOnly: 'cacheOnly',\n} as const\n\nexport type Source = {\n    uri?: string\n    headers?: { [key: string]: string }\n    priority?: Priority\n    cache?: Cache\n}\n\nexport interface OnLoadEvent {\n    nativeEvent: {\n        width: number\n        height: number\n    }\n}\n\nexport interface OnProgressEvent {\n    nativeEvent: {\n        loaded: number\n        total: number\n    }\n}\n\nexport interface ImageStyle extends FlexStyle, TransformsStyle, ShadowStyleIOS {\n    backfaceVisibility?: 'visible' | 'hidden'\n    borderBottomLeftRadius?: number\n    borderBottomRightRadius?: number\n    backgroundColor?: string\n    borderColor?: string\n    borderWidth?: number\n    borderRadius?: number\n    borderTopLeftRadius?: number\n    borderTopRightRadius?: number\n    overlayColor?: string\n    tintColor?: string\n    opacity?: number\n}\n\nexport interface FastImageProps {\n    source: Source | number\n    resizeMode?: ResizeMode\n    fallback?: boolean\n\n    onLoadStart?(): void\n\n    onProgress?(event: OnProgressEvent): void\n\n    onLoad?(event: OnLoadEvent): void\n\n    onError?(): void\n\n    onLoadEnd?(): void\n\n    /**\n     * onLayout function\n     *\n     * Invoked on mount and layout changes with\n     *\n     * {nativeEvent: { layout: {x, y, width, height}}}.\n     */\n    onLayout?: (event: LayoutChangeEvent) => void\n\n    /**\n     *\n     * Style\n     */\n    style?: StyleProp<ImageStyle>\n\n    /**\n     * TintColor\n     *\n     * If supplied, changes the color of all the non-transparent pixels to the given color.\n     */\n\n    tintColor?: number | string\n\n    /**\n     * A unique identifier for this element to be used in UI Automation testing scripts.\n     */\n    testID?: string\n\n    /**\n     * Render children within the image.\n     */\n    children?: React.ReactNode\n}\n\nfunction FastImageBase({\n    source,\n    tintColor,\n    onLoadStart,\n    onProgress,\n    onLoad,\n    onError,\n    onLoadEnd,\n    style,\n    fallback,\n    children,\n    resizeMode = 'cover',\n    forwardedRef,\n    ...props\n}: FastImageProps & { forwardedRef: React.Ref<any> }) {\n    const resolvedSource = Image.resolveAssetSource(source as any)\n\n    if (fallback) {\n        return (\n            <View style={[styles.imageContainer, style]} ref={forwardedRef}>\n                <Image\n                    {...props}\n                    style={StyleSheet.absoluteFill}\n                    source={resolvedSource}\n                    onLoadStart={onLoadStart}\n                    onProgress={onProgress}\n                    onLoad={onLoad as any}\n                    onError={onError}\n                    onLoadEnd={onLoadEnd}\n                    resizeMode={resizeMode}\n                />\n                {children}\n            </View>\n        )\n    }\n\n    return (\n        <View style={[styles.imageContainer, style]} ref={forwardedRef}>\n            <FastImageView\n                {...props}\n                tintColor={tintColor}\n                style={StyleSheet.absoluteFill}\n                source={resolvedSource}\n                onFastImageLoadStart={onLoadStart}\n                onFastImageProgress={onProgress}\n                onFastImageLoad={onLoad}\n                onFastImageError={onError}\n                onFastImageLoadEnd={onLoadEnd}\n                resizeMode={resizeMode}\n            />\n            {children}\n        </View>\n    )\n}\n\nconst FastImageMemo = memo(FastImageBase)\n\nconst FastImageComponent: React.ComponentType<FastImageProps> = forwardRef(\n    (props: FastImageProps, ref: React.Ref<any>) => (\n        <FastImageMemo forwardedRef={ref} {...props} />\n    ),\n)\n\nFastImageComponent.displayName = 'FastImage'\n\ninterface FastImageStaticProperties {\n    resizeMode: typeof resizeMode\n    priority: typeof priority\n    cacheControl: typeof cacheControl\n    preload: (sources: Source[]) => void\n    clearMemoryCache: () => Promise<void>\n    clearDiskCache: () => Promise<void>\n}\n\nconst FastImage: React.ComponentType<FastImageProps> &\n    FastImageStaticProperties = FastImageComponent as any\n\nFastImage.resizeMode = resizeMode\n\nFastImage.cacheControl = cacheControl\n\nFastImage.priority = priority\n\nFastImage.preload = (sources: Source[]) =>\n    FastImageViewNativeModule.preload(sources)\n\nFastImage.clearMemoryCache = () => FastImageViewNativeModule.clearMemoryCache()\n\nFastImage.clearDiskCache = () => FastImageViewNativeModule.clearDiskCache()\n\nconst styles = StyleSheet.create({\n    imageContainer: {\n        overflow: 'hidden',\n    },\n})\n\n// Types of requireNativeComponent are not correct.\nconst FastImageView = (requireNativeComponent as any)(\n    'FastImageView',\n    FastImage,\n    {\n        nativeOnly: {\n            onFastImageLoadStart: true,\n            onFastImageProgress: true,\n            onFastImageLoad: true,\n            onFastImageError: true,\n            onFastImageLoadEnd: true,\n        },\n    },\n)\n\nexport default FastImage\n"],"names":["FastImageViewNativeModule","NativeModules","FastImageView","resizeMode","contain","cover","stretch","center","priority","low","normal","high","cacheControl","immutable","web","cacheOnly","FastImageBase","source","tintColor","onLoadStart","onProgress","onLoad","onError","onLoadEnd","style","fallback","children","forwardedRef","props","resolvedSource","Image","resolveAssetSource","React","View","styles","imageContainer","ref","StyleSheet","absoluteFill","onFastImageLoadStart","onFastImageProgress","onFastImageLoad","onFastImageError","onFastImageLoadEnd","FastImageMemo","memo","FastImageComponent","forwardRef","displayName","FastImage","preload","sources","clearMemoryCache","clearDiskCache","create","overflow","requireNativeComponent","nativeOnly"],"mappings":";;;;;;;;;;;;;;;;;;AAcA,IAAMA,yBAAyB,GAAGC,aAAa,CAACC,aAAhD;AAIA,IAAMC,UAAU,GAAG;AACfC,EAAAA,OAAO,EAAE,SADM;AAEfC,EAAAA,KAAK,EAAE,OAFQ;AAGfC,EAAAA,OAAO,EAAE,SAHM;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;AASA,IAAMC,QAAQ,GAAG;AACbC,EAAAA,GAAG,EAAE,KADQ;AAEbC,EAAAA,MAAM,EAAE,QAFK;AAGbC,EAAAA,IAAI,EAAE;AAHO,CAAjB;AAQA,IAAMC,YAAY,GAAG;AACjB;AACAC,EAAAA,SAAS,EAAE,WAFM;AAGjB;AACAC,EAAAA,GAAG,EAAE,KAJY;AAKjB;AACAC,EAAAA,SAAS,EAAE;AANM,CAArB;;AA8FA,SAASC,aAAT;MACIC,cAAAA;MACAC,iBAAAA;MACAC,mBAAAA;MACAC,kBAAAA;MACAC,cAAAA;MACAC,eAAAA;MACAC,iBAAAA;MACAC,aAAAA;MACAC,gBAAAA;MACAC,gBAAAA;6BACAvB;MAAAA,0CAAa;MACbwB,oBAAAA;MACGC;;AAEH,MAAMC,cAAc,GAAGC,KAAK,CAACC,kBAAN,CAAyBd,MAAzB,CAAvB;;AAEA,MAAIQ,QAAJ,EAAc;AACV,WACIO,mBAAA,CAACC,IAAD;AAAMT,MAAAA,KAAK,EAAE,CAACU,MAAM,CAACC,cAAR,EAAwBX,KAAxB;AAAgCY,MAAAA,GAAG,EAAET;KAAlD,EACIK,mBAAA,CAACF,KAAD,oBACQF;AACJJ,MAAAA,KAAK,EAAEa,UAAU,CAACC;AAClBrB,MAAAA,MAAM,EAAEY;AACRV,MAAAA,WAAW,EAAEA;AACbC,MAAAA,UAAU,EAAEA;AACZC,MAAAA,MAAM,EAAEA;AACRC,MAAAA,OAAO,EAAEA;AACTC,MAAAA,SAAS,EAAEA;AACXpB,MAAAA,UAAU,EAAEA;MAThB,CADJ,EAYKuB,QAZL,CADJ;AAgBH;;AAED,SACIM,mBAAA,CAACC,IAAD;AAAMT,IAAAA,KAAK,EAAE,CAACU,MAAM,CAACC,cAAR,EAAwBX,KAAxB;AAAgCY,IAAAA,GAAG,EAAET;GAAlD,EACIK,mBAAA,CAAC9B,aAAD,oBACQ0B;AACJV,IAAAA,SAAS,EAAEA;AACXM,IAAAA,KAAK,EAAEa,UAAU,CAACC;AAClBrB,IAAAA,MAAM,EAAEY;AACRU,IAAAA,oBAAoB,EAAEpB;AACtBqB,IAAAA,mBAAmB,EAAEpB;AACrBqB,IAAAA,eAAe,EAAEpB;AACjBqB,IAAAA,gBAAgB,EAAEpB;AAClBqB,IAAAA,kBAAkB,EAAEpB;AACpBpB,IAAAA,UAAU,EAAEA;IAVhB,CADJ,EAaKuB,QAbL,CADJ;AAiBH;;AAED,IAAMkB,aAAa,gBAAGC,IAAI,CAAC7B,aAAD,CAA1B;AAEA,IAAM8B,kBAAkB,gBAAwCC,UAAU,CACtE,UAACnB,KAAD,EAAwBQ,GAAxB;AAAA,SACIJ,mBAAA,CAACY,aAAD;AAAejB,IAAAA,YAAY,EAAES;KAASR,MAAtC,CADJ;AAAA,CADsE,CAA1E;AAMAkB,kBAAkB,CAACE,WAAnB,GAAiC,WAAjC;AAWA,IAAMC,SAAS,GACiBH,kBADhC;AAGAG,SAAS,CAAC9C,UAAV,GAAuBA,UAAvB;AAEA8C,SAAS,CAACrC,YAAV,GAAyBA,YAAzB;AAEAqC,SAAS,CAACzC,QAAV,GAAqBA,QAArB;;AAEAyC,SAAS,CAACC,OAAV,GAAoB,UAACC,OAAD;AAAA,SAChBnD,yBAAyB,CAACkD,OAA1B,CAAkCC,OAAlC,CADgB;AAAA,CAApB;;AAGAF,SAAS,CAACG,gBAAV,GAA6B;AAAA,SAAMpD,yBAAyB,CAACoD,gBAA1B,EAAN;AAAA,CAA7B;;AAEAH,SAAS,CAACI,cAAV,GAA2B;AAAA,SAAMrD,yBAAyB,CAACqD,cAA1B,EAAN;AAAA,CAA3B;;AAEA,IAAMnB,MAAM,gBAAGG,UAAU,CAACiB,MAAX,CAAkB;AAC7BnB,EAAAA,cAAc,EAAE;AACZoB,IAAAA,QAAQ,EAAE;AADE;AADa,CAAlB,CAAf;;AAOA,IAAMrD,aAAa,gBAAIsD,sBAA8B,CACjD,eADiD,EAEjDP,SAFiD,EAGjD;AACIQ,EAAAA,UAAU,EAAE;AACRlB,IAAAA,oBAAoB,EAAE,IADd;AAERC,IAAAA,mBAAmB,EAAE,IAFb;AAGRC,IAAAA,eAAe,EAAE,IAHT;AAIRC,IAAAA,gBAAgB,EAAE,IAJV;AAKRC,IAAAA,kBAAkB,EAAE;AALZ;AADhB,CAHiD,CAArD;;;;"}
\ No newline at end of file
diff --git a/node_modules/react-native-fast-image/ios/FastImage/FFFastImageViewManager.m b/node_modules/react-native-fast-image/ios/FastImage/FFFastImageViewManager.m
index 4cb5220..d843fe2 100644
--- a/node_modules/react-native-fast-image/ios/FastImage/FFFastImageViewManager.m
+++ b/node_modules/react-native-fast-image/ios/FastImage/FFFastImageViewManager.m
@@ -1,6 +1,7 @@
 #import "FFFastImageViewManager.h"
 #import "FFFastImageView.h"
 
+#import <SDWebImage/SDImageCache.h>
 #import <SDWebImage/SDWebImagePrefetcher.h>
 
 @implementation FFFastImageViewManager
@@ -34,5 +35,18 @@ - (FFFastImageView*)view {
     [[SDWebImagePrefetcher sharedImagePrefetcher] prefetchURLs:urls];
 }
 
+RCT_EXPORT_METHOD(clearMemoryCache:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject)
+{
+    [SDImageCache.sharedImageCache clearMemory];
+    resolve(NULL);
+}
+
+RCT_EXPORT_METHOD(clearDiskCache:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject)
+{
+    [SDImageCache.sharedImageCache clearDiskOnCompletion:^(){
+        resolve(NULL);
+    }];
+}
+
 @end
 
