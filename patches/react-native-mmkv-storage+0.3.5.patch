diff --git a/node_modules/react-native-mmkv-storage/android/src/main/java/com/ammarahmed/mmkv/StorageGetters.java b/node_modules/react-native-mmkv-storage/android/src/main/java/com/ammarahmed/mmkv/StorageGetters.java
index 568e369..229b911 100644
--- a/node_modules/react-native-mmkv-storage/android/src/main/java/com/ammarahmed/mmkv/StorageGetters.java
+++ b/node_modules/react-native-mmkv-storage/android/src/main/java/com/ammarahmed/mmkv/StorageGetters.java
@@ -52,8 +52,12 @@ public class StorageGetters {
                     case Constants.DATA_TYPE_MAP:
                     case Constants.DATA_TYPE_ARRAY:
                         Bundle bundle = kv.decodeParcelable(key, Bundle.class);
-                        WritableMap map = Arguments.fromBundle(bundle);
-                        callback.invoke(null, map);
+                        if (bundle == null) {
+                            callback.invoke(null, null);
+                        } else {
+                            WritableMap map = Arguments.fromBundle(bundle);
+                            callback.invoke(null, map);
+                        }
                         break;
                     
                 }
diff --git a/node_modules/react-native-mmkv-storage/ios/SecureStorage.m b/node_modules/react-native-mmkv-storage/ios/SecureStorage.m
index 70f3a01..30d7251 100644
--- a/node_modules/react-native-mmkv-storage/ios/SecureStorage.m
+++ b/node_modules/react-native-mmkv-storage/ios/SecureStorage.m
@@ -46,7 +46,6 @@ - (void) setSecureKey: (NSString *)key value:(NSString *)value
 - (NSString *) getSecureKey:(NSString *)key
                    callback:(RCTResponseSenderBlock)callback
 {
-    
     @try {
         [self handleAppUninstallation];
         NSString *value = [self searchKeychainCopyMatching:key];
@@ -130,7 +129,8 @@ - (void) removeSecureKey:(NSString *)key
 
 - (NSMutableDictionary *)newSearchDictionary:(NSString *)identifier {
     NSMutableDictionary *searchDictionary = [[NSMutableDictionary alloc] init];
-    serviceName = [[NSBundle mainBundle] bundleIdentifier];
+    // this value is shared by main app and extensions, so, is the best to be used here
+    serviceName = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"AppGroup"];
     
     [searchDictionary setObject:(id)kSecClassGenericPassword forKey:(id)kSecClass];
     
@@ -139,6 +139,9 @@ - (NSMutableDictionary *)newSearchDictionary:(NSString *)identifier {
     [searchDictionary setObject:encodedIdentifier forKey:(id)kSecAttrAccount];
     [searchDictionary setObject:serviceName forKey:(id)kSecAttrService];
     
+    NSString *keychainGroup = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"KeychainGroup"];
+    [searchDictionary setObject:keychainGroup forKey:(id)kSecAttrAccessGroup];
+    
     return searchDictionary;
 }
 
@@ -240,10 +243,13 @@ - (void)clearSecureKeyStore
 
 - (void)handleAppUninstallation
 {
-    if (![[NSUserDefaults standardUserDefaults] boolForKey:@"RnSksIsAppInstalled"]) {
+    // use app group user defaults to prevent clear when it's share extension
+    NSString *suiteName = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"AppGroup"];
+    NSUserDefaults *userDefaults = [[NSUserDefaults alloc] initWithSuiteName:suiteName];
+    if (![userDefaults boolForKey:@"RnSksIsAppInstalled"]) {
         [self clearSecureKeyStore];
-        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"RnSksIsAppInstalled"];
-        [[NSUserDefaults standardUserDefaults] synchronize];
+        [userDefaults setBool:YES forKey:@"RnSksIsAppInstalled"];
+        [userDefaults synchronize];
     }
 }
 
diff --git a/node_modules/react-native-mmkv-storage/ios/StorageGetters.m b/node_modules/react-native-mmkv-storage/ios/StorageGetters.m
index 909d056..d62814a 100644
--- a/node_modules/react-native-mmkv-storage/ios/StorageGetters.m
+++ b/node_modules/react-native-mmkv-storage/ios/StorageGetters.m
@@ -38,8 +38,13 @@ +(void) getItem:(NSString *)ID
         if ([kv containsKey:key]) {
             switch (type.integerValue) {
                 case 1:
-                    
-                    callback(@[[NSNull null], [kv getObjectOfClass:NSString.class forKey:key]]);
+                    {
+                        NSString* string = [kv getObjectOfClass:NSString.class forKey:key];
+                        if (!string) {
+                            string = (NSString *)[NSNull null];
+                        }
+                        callback(@[[NSNull null], string]);
+                    }
                     break;
                 case 2:
                     
diff --git a/node_modules/react-native-mmkv-storage/ios/StorageIndexer.m b/node_modules/react-native-mmkv-storage/ios/StorageIndexer.m
index e7c914b..891cf93 100644
--- a/node_modules/react-native-mmkv-storage/ios/StorageIndexer.m
+++ b/node_modules/react-native-mmkv-storage/ios/StorageIndexer.m
@@ -58,7 +58,11 @@ + (void) removeKeyFromIndexer:(MMKV *)kv
     if (index != NULL && [index containsObject:key]) {
         
         [index removeObject:key];
-        [kv setObject:index forKey:stringsIndexKey];
+        if (!index || [index count] == 0) {
+            [kv removeValueForKey:stringsIndexKey];
+        } else {
+            [kv setObject:index forKey:stringsIndexKey];
+        }
         return;
     }
     
@@ -67,7 +71,11 @@ + (void) removeKeyFromIndexer:(MMKV *)kv
     if (index != NULL && [index containsObject:key]) {
         
         [index removeObject:key];
-        [kv setObject:index forKey:intIndexKey];
+        if (!index || [index count] == 0) {
+            [kv removeValueForKey:intIndexKey];
+        } else {
+            [kv setObject:index forKey:intIndexKey];
+        }
         return;
     }
     
@@ -76,7 +84,11 @@ + (void) removeKeyFromIndexer:(MMKV *)kv
     if (index != NULL && [index containsObject:key]) {
         
         [index removeObject:key];
-        [kv setObject:index forKey:boolIndexKey];
+        if (!index || [index count] == 0) {
+            [kv removeValueForKey:boolIndexKey];
+        } else {
+            [kv setObject:index forKey:boolIndexKey];
+        }
         return;
     }
     
@@ -85,7 +97,11 @@ + (void) removeKeyFromIndexer:(MMKV *)kv
     if (index != NULL && [index containsObject:key]) {
         
         [index removeObject:key];
-        [kv setObject:index forKey:mapIndexKey];
+        if (!index || [index count] == 0) {
+            [kv removeValueForKey:mapIndexKey];
+        } else {
+            [kv setObject:index forKey:mapIndexKey];
+        }
         return;
     }
     
@@ -94,7 +110,11 @@ + (void) removeKeyFromIndexer:(MMKV *)kv
     if (index != NULL && [index containsObject:key]) {
         
         [index removeObject:key];
-        [kv setObject:index forKey:arrayIndexKey];
+        if (!index || [index count] == 0) {
+            [kv removeValueForKey:arrayIndexKey];
+        } else {
+            [kv setObject:index forKey:arrayIndexKey];
+        }
         return;
     }
     
diff --git a/android/build.gradle b/android/build.gradle
index 81daca5..308e3a1 100644
--- a/node_modules/react-native-mmkv-storage/android/build.gradle
+++ b/node_modules/react-native-mmkv-storage/android/build.gradle
@@ -43,6 +43,6 @@ repositories {
 dependencies {
     implementation 'com.facebook.react:react-native:+'
     implementation 'com.tencent:mmkv-static:1.2.1'
-    implementation "com.scottyab:secure-preferences-lib:0.1.4"
+    implementation "androidx.security:security-crypto:1.0.0"
 }
-  
\ No newline at end of file
+  
diff --git a/node_modules/react-native-mmkv-storage/android/src/main/java/com/ammarahmed/mmkv/Constants.java b/node_modules/react-native-mmkv-storage/android/src/main/java/com/ammarahmed/mmkv/Constants.java
index 0e336d9..8503394 100644
--- a/node_modules/react-native-mmkv-storage/android/src/main/java/com/ammarahmed/mmkv/Constants.java
+++ b/node_modules/react-native-mmkv-storage/android/src/main/java/com/ammarahmed/mmkv/Constants.java
@@ -8,7 +8,7 @@ public class Constants {
     public static final String KEYSTORE_PROVIDER_3 = "AndroidOpenSSL";
 
     public static final String RSA_ALGORITHM = "RSA/ECB/PKCS1Padding";
-    public static final String AES_ALGORITHM = "AES/ECB/PKCS5Padding";
+    public static final String AES_ALGORITHM = "AES/GCM/NoPadding";
 
     public static final String TAG = "RNSecureStorage";
 
@@ -16,6 +16,7 @@ public class Constants {
     public static final String SKS_KEY_FILENAME = "SKS_KEY_FILE";
     public static final String SKS_DATA_FILENAME = "SKS_DATA_FILE";
 
+    public static final String AES_IV_FILENAME = "__iv";
 
     public static final int DATA_TYPE_STRING = 1;
     public static final int DATA_TYPE_INT = 2;
diff --git a/node_modules/react-native-mmkv-storage/android/src/main/java/com/ammarahmed/mmkv/SecureKeystore.java b/node_modules/react-native-mmkv-storage/android/src/main/java/com/ammarahmed/mmkv/SecureKeystore.java
index b733e2f..0e11892 100644
--- a/node_modules/react-native-mmkv-storage/android/src/main/java/com/ammarahmed/mmkv/SecureKeystore.java
+++ b/node_modules/react-native-mmkv-storage/android/src/main/java/com/ammarahmed/mmkv/SecureKeystore.java
@@ -8,13 +8,14 @@ import android.security.KeyPairGeneratorSpec;
 import android.util.Log;
 
 import androidx.annotation.Nullable;
+import androidx.security.crypto.EncryptedSharedPreferences;
+import androidx.security.crypto.MasterKeys;
 
 import com.facebook.react.bridge.Callback;
 import com.facebook.react.bridge.ReactApplicationContext;
 import com.facebook.react.bridge.ReactMethod;
 import com.facebook.react.bridge.ReadableMap;
 import com.facebook.react.uimanager.IllegalViewOperationException;
-import com.securepreferences.SecurePreferences;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -25,6 +26,7 @@ import java.security.GeneralSecurityException;
 import java.security.KeyPairGenerator;
 import java.security.KeyStore;
 import java.security.PrivateKey;
+import java.security.SecureRandom;
 import java.security.PublicKey;
 import java.util.ArrayList;
 import java.util.Calendar;
@@ -37,6 +39,7 @@ import javax.crypto.KeyGenerator;
 import javax.crypto.SecretKey;
 import javax.crypto.spec.SecretKeySpec;
 import javax.security.auth.x500.X500Principal;
+import javax.crypto.spec.IvParameterSpec;
 
 public class SecureKeystore {
 
@@ -53,7 +56,17 @@ public class SecureKeystore {
 
         reactContext = reactApplicationContext;
         if (!useKeystore()) {
-            prefs = new SecurePreferences(reactApplicationContext, (String) null, "e4b001df9a082298dd090bb7455c45d92fbd5ddd.xml");
+            try {
+                prefs = EncryptedSharedPreferences.create(
+                        "e4b001df9a082298dd090bb7455c45d92fbd5dda.xml",
+                        MasterKeys.getOrCreate(MasterKeys.AES256_GCM_SPEC),
+                        reactContext,
+                        EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
+                        EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM
+                );
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
         }
     }
 
@@ -64,6 +77,19 @@ public class SecureKeystore {
                 directionality == Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC;
     }
 
+    private IvParameterSpec getIv(Context context) throws IOException {
+        byte[] iv;
+        if(Storage.exists(context, Constants.AES_IV_FILENAME)){
+            iv = Storage.readValues(context, Constants.AES_IV_FILENAME );
+        }
+        else {
+            iv = new byte[16];
+            new SecureRandom().nextBytes(iv);
+            Storage.writeValues(context, Constants.AES_IV_FILENAME, iv);
+        }
+        return new IvParameterSpec(iv);
+    }
+
 
     public void setSecureKey(String key, String value, @Nullable ReadableMap options, Callback callback) {
 
@@ -254,9 +280,9 @@ public class SecureKeystore {
         return encryptCipherText(cipher, plainTextBytes);
     }
 
-    private byte[] encryptAesPlainText(SecretKey secretKey, String plainText) throws GeneralSecurityException, IOException {
+    private byte[] encryptAesPlainText(SecretKey secretKey, IvParameterSpec iv, String plainText) throws GeneralSecurityException, IOException {
         Cipher cipher = Cipher.getInstance(Constants.AES_ALGORITHM);
-        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
+        cipher.init(Cipher.ENCRYPT_MODE, secretKey, iv);
         return encryptCipherText(cipher, plainText);
     }
 
@@ -293,7 +319,7 @@ public class SecureKeystore {
 
     public void setCipherText(Context context, String alias, String input) throws GeneralSecurityException, IOException {
         Storage.writeValues(context, Constants.SKS_DATA_FILENAME + alias,
-                encryptAesPlainText(getOrCreateSecretKey(context, alias), input));
+                encryptAesPlainText(getOrCreateSecretKey(context, alias), getIv(context), input));
     }
 
     private PrivateKey getPrivateKey(String alias) throws GeneralSecurityException, IOException {
@@ -308,9 +334,9 @@ public class SecureKeystore {
         return decryptCipherText(cipher, cipherTextBytes);
     }
 
-    private byte[] decryptAesCipherText(SecretKey secretKey, byte[] cipherTextBytes) throws GeneralSecurityException, IOException {
+    private byte[] decryptAesCipherText(SecretKey secretKey, IvParameterSpec iv, byte[] cipherTextBytes) throws GeneralSecurityException, IOException {
         Cipher cipher = Cipher.getInstance(Constants.AES_ALGORITHM);
-        cipher.init(Cipher.DECRYPT_MODE, secretKey);
+        cipher.init(Cipher.DECRYPT_MODE, secretKey, iv);
         return decryptCipherText(cipher, cipherTextBytes);
     }
 
@@ -335,7 +361,7 @@ public class SecureKeystore {
     public String getPlainText(Context context, String alias) throws GeneralSecurityException, IOException {
         SecretKey secretKey = getSymmetricKey(context, alias);
         byte[] cipherTextBytes = Storage.readValues(context, Constants.SKS_DATA_FILENAME + alias);
-        return new String(decryptAesCipherText(secretKey, cipherTextBytes), "UTF-8");
+        return new String(decryptAesCipherText(secretKey, getIv(context), cipherTextBytes), "UTF-8");
     }
 
     public boolean exists(Context context, String alias) throws IOException {
