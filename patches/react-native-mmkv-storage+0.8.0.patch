diff --git a/node_modules/react-native-mmkv-storage/ios/SecureStorage.m b/node_modules/react-native-mmkv-storage/ios/SecureStorage.m
index dbea26b..7b2083c 100644
--- a/node_modules/react-native-mmkv-storage/ios/SecureStorage.m
+++ b/node_modules/react-native-mmkv-storage/ios/SecureStorage.m
@@ -40,14 +40,14 @@ - (NSString *) getSecureKey:(NSString *)key
     @try {
         [self handleAppUninstallation];
         NSString *value = [self searchKeychainCopyMatching:key];
-        dispatch_sync(dispatch_get_main_queue(), ^{
-            int readAttempts = 0;
-            // See: https://github.com/ammarahm-ed/react-native-mmkv-storage/issues/195
-            while (![[UIApplication sharedApplication] isProtectedDataAvailable] && readAttempts++ < 100) {
-                // sleep 25ms before another attempt
-                usleep(25000);
-            }
-        });
+//        dispatch_sync(dispatch_get_main_queue(), ^{
+//            int readAttempts = 0;
+//            // See: https://github.com/ammarahm-ed/react-native-mmkv-storage/issues/195
+//            while (![[UIApplication sharedApplication] isProtectedDataAvailable] && readAttempts++ < 100) {
+//                // sleep 25ms before another attempt
+//                usleep(25000);
+//            }
+//        });
         if (value == nil) {
             NSString* errorMessage = @"key does not present";
           
@@ -100,6 +100,9 @@ - (void) removeSecureKey:(NSString *)key
 
 - (NSMutableDictionary *)newSearchDictionary:(NSString *)identifier {
     NSMutableDictionary *searchDictionary = [[NSMutableDictionary alloc] init];
+    // this value is shared by main app and extensions, so, is the best to be used here
+    serviceName = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"AppGroup"];
+
     if(serviceName == nil){
         serviceName = [[NSBundle mainBundle] bundleIdentifier];
     }
@@ -111,6 +114,9 @@ - (NSMutableDictionary *)newSearchDictionary:(NSString *)identifier {
     [searchDictionary setObject:encodedIdentifier forKey:(id)kSecAttrAccount];
     [searchDictionary setObject:serviceName forKey:(id)kSecAttrService];
 
+    NSString *keychainGroup = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"KeychainGroup"];
+    [searchDictionary setObject:keychainGroup forKey:(id)kSecAttrAccessGroup];
+    
     return searchDictionary;
 }
 
@@ -212,11 +218,14 @@ - (void)clearSecureKeyStore
 
 - (void)handleAppUninstallation
 {
-   // if (![[NSUserDefaults standardUserDefaults] boolForKey:@"RnSksIsAppInstalled"]) {
-   //     [self clearSecureKeyStore];
-     //[[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"IsAppInstalled"];
-     [[NSUserDefaults standardUserDefaults] synchronize];
-   // }
+    // use app group user defaults to prevent clear when it's share extension
+    NSString *suiteName = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"AppGroup"];
+    NSUserDefaults *userDefaults = [[NSUserDefaults alloc] initWithSuiteName:suiteName];
+    if (![userDefaults boolForKey:@"RnSksIsAppInstalled"]) {
+        [self clearSecureKeyStore];
+        [userDefaults setBool:YES forKey:@"RnSksIsAppInstalled"];
+        [userDefaults synchronize];
+    }
 }
 
 - (void) setServiceName:(NSString *)_serviceName
