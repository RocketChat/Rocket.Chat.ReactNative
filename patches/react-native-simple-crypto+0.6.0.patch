diff --git a/node_modules/react-native-simple-crypto/android/src/main/java/com/pedrouid/crypto/RCTCryptoPackage.java b/node_modules/react-native-simple-crypto/android/src/main/java/com/pedrouid/crypto/RCTCryptoPackage.java
index 2ee3cb4..1288fd6 100644
--- a/node_modules/react-native-simple-crypto/android/src/main/java/com/pedrouid/crypto/RCTCryptoPackage.java
+++ b/node_modules/react-native-simple-crypto/android/src/main/java/com/pedrouid/crypto/RCTCryptoPackage.java
@@ -21,7 +21,8 @@ public class RCTCryptoPackage implements ReactPackage {
                 new RCTPbkdf2(reactContext),
                 new RCTRsa(reactContext),
                 new RCTRsaUtils(reactContext),
-                new RandomBytesModule(reactContext)
+                new RandomBytesModule(reactContext),
+                new Util(reactContext)
         );
     }
 
diff --git a/node_modules/react-native-simple-crypto/android/src/main/java/com/pedrouid/crypto/Util.java b/node_modules/react-native-simple-crypto/android/src/main/java/com/pedrouid/crypto/Util.java
index caba3b5..3aace77 100644
--- a/node_modules/react-native-simple-crypto/android/src/main/java/com/pedrouid/crypto/Util.java
+++ b/node_modules/react-native-simple-crypto/android/src/main/java/com/pedrouid/crypto/Util.java
@@ -3,11 +3,48 @@ package com.pedrouid.crypto;
 import android.content.Context;
 import android.net.Uri;
 
+import com.facebook.react.bridge.Promise;
+import com.facebook.react.bridge.ReactApplicationContext;
+import com.facebook.react.bridge.ReactContextBaseJavaModule;
+import com.facebook.react.bridge.ReactMethod;
+
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.InputStream;
+import java.security.MessageDigest;
+import java.security.SecureRandom;
+
+public class Util extends ReactContextBaseJavaModule {
+
+     public Util(ReactApplicationContext reactContext) {
+        super(reactContext);
+    }
+
+    @Override
+    public String getName() {
+        return "Shared";
+    }
+
+    @ReactMethod
+    public void calculateFileChecksum(String filePath, Promise promise) {
+        try {
+            String result = calculateFileChecksum(getReactApplicationContext(),filePath );
+            promise.resolve(result);
+        } catch (Exception e) {
+            promise.reject("-1", e.getMessage());
+        }
+    }
+
+    @ReactMethod
+    public void getRandomValues(int length, Promise promise) {
+        try {
+            String result = getRandomValues(length);
+            promise.resolve(result);
+        } catch (Exception e) {
+            promise.reject("-1", e.getMessage());
+        }
+    }
 
-public class Util {
     public static String bytesToHex(byte[] bytes) {
         final char[] hexArray = "0123456789abcdef".toCharArray();
         char[] hexChars = new char[bytes.length * 2];
@@ -39,4 +76,27 @@ public class Util {
             return new FileInputStream(new File(inputFile)); // Handle plain file paths
         }
     }
+
+    public static String calculateFileChecksum(Context context, String filePath) throws Exception {
+        InputStream inputStream = getInputStream(context, filePath);
+        MessageDigest digest = MessageDigest.getInstance("SHA-256");
+        byte[] buffer = new byte[4096];
+        int bytesRead;
+        while ((bytesRead = inputStream.read(buffer)) != -1) {
+            digest.update(buffer, 0, bytesRead);
+        }
+        inputStream.close();
+        byte[] hash = digest.digest();
+        return bytesToHex(hash);
+    }
+
+    public static String getRandomValues(int length) {
+        final String alphanumericChars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
+        SecureRandom random = new SecureRandom();
+        StringBuilder sb = new StringBuilder(length);
+        for (int i = 0; i < length; i++) {
+            sb.append(alphanumericChars.charAt(random.nextInt(alphanumericChars.length())));
+        }
+        return sb.toString();
+    }
 }
diff --git a/node_modules/react-native-simple-crypto/index.d.ts b/node_modules/react-native-simple-crypto/index.d.ts
index 079c397..d074be2 100644
--- a/node_modules/react-native-simple-crypto/index.d.ts
+++ b/node_modules/react-native-simple-crypto/index.d.ts
@@ -77,6 +77,8 @@ declare module "react-native-simple-crypto" {
 
   export namespace utils {
     export function randomBytes(bytes: number): Promise<ArrayBuffer>;
+    export function calculateFileChecksum(filePath: string): Promise<string>;
+    export function getRandomValues(length: number): Promise<string>;
     export function convertArrayBufferToUtf8(input: ArrayBuffer): string;
     export function convertUtf8ToArrayBuffer(input: string): ArrayBuffer;
     export function convertArrayBufferToBase64(input: ArrayBuffer): string;
diff --git a/node_modules/react-native-simple-crypto/index.js b/node_modules/react-native-simple-crypto/index.js
index 6d4ed10..ecc18e6 100644
--- a/node_modules/react-native-simple-crypto/index.js
+++ b/node_modules/react-native-simple-crypto/index.js
@@ -69,6 +69,14 @@ async function randomBytes(length) {
   return convertBase64ToArrayBuffer(await NativeModules.RNRandomBytes.randomBytes(length));
 }
 
+async function calculateFileChecksum(filePath) {
+  return NativeModules.Shared.calculateFileChecksum(filePath);
+}
+
+async function getRandomValues(length) {
+  return NativeModules.Shared.getRandomValues(length);
+}
+
 async function SHAWrapper(data, algorithm) {
   if (typeof data === 'string') {
     return NativeModules.Sha.shaUtf8(data, algorithm);
@@ -148,6 +156,8 @@ const RSA = {
 
 const utils = {
   randomBytes,
+  calculateFileChecksum,
+  getRandomValues,
   convertArrayBufferToUtf8,
   convertUtf8ToArrayBuffer,
   convertArrayBufferToBase64,
diff --git a/node_modules/react-native-simple-crypto/ios/.DS_Store b/node_modules/react-native-simple-crypto/ios/.DS_Store
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native-simple-crypto/ios/RCTCrypto/RCTShared.h b/node_modules/react-native-simple-crypto/ios/RCTCrypto/RCTShared.h
new file mode 100644
index 0000000..55b52d1
--- /dev/null
+++ b/node_modules/react-native-simple-crypto/ios/RCTCrypto/RCTShared.h
@@ -0,0 +1,5 @@
+#import <React/RCTBridgeModule.h>
+
+@interface RCTShared : NSObject <RCTBridgeModule>
+
+@end
diff --git a/node_modules/react-native-simple-crypto/ios/RCTCrypto/RCTShared.m b/node_modules/react-native-simple-crypto/ios/RCTCrypto/RCTShared.m
new file mode 100644
index 0000000..1e0942d
--- /dev/null
+++ b/node_modules/react-native-simple-crypto/ios/RCTCrypto/RCTShared.m
@@ -0,0 +1,27 @@
+#import "RCTShared.h"
+#import "Shared.h"
+
+@implementation RCTShared
+
+RCT_EXPORT_MODULE()
+ 
+RCT_EXPORT_METHOD(calculateFileChecksum:(NSString *)filePath resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
+    NSError *error = nil;
+    NSString *data = [Shared calculateFileChecksum:filePath];
+    if (data == nil) {
+        reject(@"shared_checksum_fail", @"Checksum error", error);
+    } else {
+        resolve(data);
+    }
+}
+
+RCT_EXPORT_METHOD(getRandomValues:(NSUInteger)length resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
+    NSString *randomString = [Shared getRandomValues:length];
+    if (randomString == nil) {
+        reject(@"shared_random_fail", @"Random value generation error", nil);
+    } else {
+        resolve(randomString);
+    }
+}
+
+@end
diff --git a/node_modules/react-native-simple-crypto/ios/RCTCrypto/lib/Aes.m b/node_modules/react-native-simple-crypto/ios/RCTCrypto/lib/Aes.m
index 067d962..b24e4dd 100644
--- a/node_modules/react-native-simple-crypto/ios/RCTCrypto/lib/Aes.m
+++ b/node_modules/react-native-simple-crypto/ios/RCTCrypto/lib/Aes.m
@@ -55,7 +55,7 @@
 
     NSString *normalizedFilePath = [filePath stringByReplacingOccurrencesOfString:@"file://" withString:@""];
     NSString *outputFileName = [@"processed_" stringByAppendingString:[normalizedFilePath lastPathComponent]];
-    NSString *outputFilePath = [[[normalizedFilePath stringByDeletingLastPathComponent] stringByAppendingPathComponent:outputFileName] stringByDeletingPathExtension];
+    NSString *outputFilePath = [[normalizedFilePath stringByDeletingLastPathComponent] stringByAppendingPathComponent:outputFileName];
     NSInputStream *inputStream = [NSInputStream inputStreamWithFileAtPath:normalizedFilePath];
     NSOutputStream *outputStream = [NSOutputStream outputStreamToFileAtPath:outputFilePath append:NO];
     [inputStream open];
@@ -67,6 +67,8 @@
     CCCryptorStatus status = CCCryptorCreateWithMode(operation, kCCModeCTR, kCCAlgorithmAES, ccNoPadding, ivData.bytes, keyData.bytes, keyData.length, NULL, 0, 0, kCCModeOptionCTR_BE, &cryptor);
     if (status != kCCSuccess) {
         NSLog(@"Failed to create cryptor: %d", status);
+        [inputStream close];
+        [outputStream close];
         return nil;
     }
 
@@ -79,8 +81,25 @@
                 [outputStream write:buffer maxLength:dataOutMoved];
             } else {
                 NSLog(@"Cryptor update failed: %d", status);
+                return nil;
                 break;
             }
+        } else if (bytesRead < 0) {
+            NSLog(@"Input stream read error");
+            status = kCCDecodeError;
+            return nil;
+            break;
+        }
+    }
+
+    if (status == kCCSuccess) {
+        size_t finalBytesOut;
+        status = CCCryptorFinal(cryptor, buffer, bufferSize, &finalBytesOut);
+        if (status == kCCSuccess) {
+            [outputStream write:buffer maxLength:finalBytesOut];
+        } else {
+            NSLog(@"Cryptor final failed: %d", status);
+            return nil;
         }
     }
 
@@ -89,15 +108,20 @@
     [outputStream close];
 
     if (status == kCCSuccess) {
-        if (operation == kCCDecrypt) {
-            NSFileManager *fileManager = [NSFileManager defaultManager];
-            // Overwrite the input file with the decrypted file
-            [fileManager removeItemAtPath:normalizedFilePath error:nil];
-            [fileManager moveItemAtPath:outputFilePath toPath:normalizedFilePath error:nil];
-            return [NSString stringWithFormat:@"file://%@", normalizedFilePath];
-        } else {
-            return [NSString stringWithFormat:@"file://%@", outputFilePath];
+        NSURL *originalFileURL = [NSURL fileURLWithPath:normalizedFilePath];
+        NSURL *outputFileURL = [NSURL fileURLWithPath:outputFilePath];
+        NSError *error = nil;
+        [[NSFileManager defaultManager] replaceItemAtURL:originalFileURL
+                                          withItemAtURL:outputFileURL
+                                         backupItemName:nil
+                                                options:NSFileManagerItemReplacementUsingNewMetadataOnly
+                                       resultingItemURL:nil
+                                                  error:&error];
+        if (error) {
+            NSLog(@"Failed to replace original file: %@", error);
+            return nil;
         }
+        return [NSString stringWithFormat:@"file://%@", normalizedFilePath];
     } else {
         // Clean up temp file in case of failure
         [[NSFileManager defaultManager] removeItemAtPath:outputFilePath error:nil];
@@ -105,7 +129,6 @@
     }
 }
 
-
 + (NSString *)encryptFile:(NSString *)filePath key:(NSString *)key iv:(NSString *)iv {
     return [self processFile:filePath operation:kCCEncrypt key:key iv:iv];
 }
diff --git a/node_modules/react-native-simple-crypto/ios/RCTCrypto/lib/Shared.h b/node_modules/react-native-simple-crypto/ios/RCTCrypto/lib/Shared.h
index 398444b..af48e1c 100644
--- a/node_modules/react-native-simple-crypto/ios/RCTCrypto/lib/Shared.h
+++ b/node_modules/react-native-simple-crypto/ios/RCTCrypto/lib/Shared.h
@@ -4,6 +4,6 @@
 + (NSString *) toHex: (NSData *)nsdata;
 + (NSData *) fromHex: (NSString *)string;
 + (NSString *)base64FromBase64URL:(NSString *)base64URL;
-+ (NSString *)normalizeFilePath:(NSString *)filePath;
-+ (NSString *)restoreFilePathSchemeIfNeeded:(NSString *)filePath originalPath:(NSString *)originalPath;
++ (NSString *)calculateFileChecksum:(NSString *)filePath;
++ (NSString *)getRandomValues: (NSUInteger)length;
 @end
diff --git a/node_modules/react-native-simple-crypto/ios/RCTCrypto/lib/Shared.m b/node_modules/react-native-simple-crypto/ios/RCTCrypto/lib/Shared.m
index e97098b..168006c 100644
--- a/node_modules/react-native-simple-crypto/ios/RCTCrypto/lib/Shared.m
+++ b/node_modules/react-native-simple-crypto/ios/RCTCrypto/lib/Shared.m
@@ -41,4 +41,61 @@
     return base64;
 }
 
++ (NSString *)calculateFileChecksum:(NSString *)filePath {
+    NSString *normalizedFilePath = [filePath stringByReplacingOccurrencesOfString:@"file://" withString:@""];
+    NSInputStream *inputStream = [NSInputStream inputStreamWithFileAtPath:normalizedFilePath];
+    [inputStream open];
+
+    if (!inputStream) {
+        NSLog(@"Failed to open file: %@", filePath);
+        return nil;
+    }
+
+    CC_SHA256_CTX sha256;
+    CC_SHA256_Init(&sha256);
+
+    uint8_t buffer[4096];
+    NSInteger bytesRead = 0;
+
+    while ((bytesRead = [inputStream read:buffer maxLength:sizeof(buffer)]) > 0) {
+        CC_SHA256_Update(&sha256, buffer, (CC_LONG)bytesRead);
+    }
+
+    [inputStream close];
+
+    if (bytesRead < 0) {
+        NSLog(@"File read error: %@", filePath);
+        return nil;
+    }
+
+    unsigned char hash[CC_SHA256_DIGEST_LENGTH];
+    CC_SHA256_Final(hash, &sha256);
+
+    NSMutableString *checksum = [NSMutableString stringWithCapacity:CC_SHA256_DIGEST_LENGTH * 2];
+    for (int i = 0; i < CC_SHA256_DIGEST_LENGTH; i++) {
+        [checksum appendFormat:@"%02x", hash[i]];
+    }
+
+    return checksum;
+}
+
++ (NSString *)getRandomValues:(NSUInteger)length {
+    static const char alphanumericChars[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
+    NSMutableData *randomData = [NSMutableData dataWithLength:length];
+    
+    int result = SecRandomCopyBytes(kSecRandomDefault, length, randomData.mutableBytes);
+    if (result != 0) {
+        return nil;
+    }
+    
+    NSMutableString *randomString = [NSMutableString stringWithCapacity:length];
+    const unsigned char *dataBytes = (const unsigned char *)randomData.bytes;
+    
+    for (NSUInteger i = 0; i < length; i++) {
+        [randomString appendFormat:@"%c", alphanumericChars[dataBytes[i] % (sizeof(alphanumericChars) - 1)]];
+    }
+    
+    return [randomString copy];
+}
+
 @end
