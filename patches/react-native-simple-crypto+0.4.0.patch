diff --git a/node_modules/react-native-simple-crypto/ios/RCTCrypto/RCTRsaUtils.swift b/node_modules/react-native-simple-crypto/ios/RCTCrypto/RCTRsaUtils.swift
index 11466b6..8018330 100644
--- a/node_modules/react-native-simple-crypto/ios/RCTCrypto/RCTRsaUtils.swift
+++ b/node_modules/react-native-simple-crypto/ios/RCTCrypto/RCTRsaUtils.swift
@@ -44,33 +44,41 @@ public class RCTRsaUtils: NSObject {
         let rsakey = RSA_new()
         defer { RSA_free(rsakey) }
         var isPublic = true
+        var new_n, new_e, new_d, new_p, new_q, new_dp, new_dq, new_qi: OpaquePointer?
 
         if let n = jwk["n"] as? String {
-            rsakey?.pointee.n = try? base64URLToBignum(n)
+            new_n = try? base64URLToBignum(n)
         }
         if let e = jwk["e"] as? String {
-            rsakey?.pointee.e = try? base64URLToBignum(e)
+            new_e = try? base64URLToBignum(e)
         }
         if let d = jwk["d"] as? String {
-            rsakey?.pointee.d = try? base64URLToBignum(d)
+            new_d = try? base64URLToBignum(d)
             isPublic = false
         }
         if let p = jwk["p"] as? String {
-            rsakey?.pointee.p = try? base64URLToBignum(p)
+            new_p = try? base64URLToBignum(p)
         }
         if let q = jwk["q"] as? String {
-            rsakey?.pointee.q = try? base64URLToBignum(q)
+            new_q = try? base64URLToBignum(q)
         }
         if let dq = jwk["dq"] as? String {
-            rsakey?.pointee.dmq1 = try? base64URLToBignum(dq)
+            new_dq = try? base64URLToBignum(dq)
         }
         if let dp = jwk["dp"] as? String {
-            rsakey?.pointee.dmp1 = try? base64URLToBignum(dp)
+            new_dp = try? base64URLToBignum(dp)
         }
         if let qi = jwk["qi"] as? String {
-            rsakey?.pointee.iqmp = try? base64URLToBignum(qi)
+            new_qi = try? base64URLToBignum(qi)
         }
         
+//        RSA_
+        
+//        RSA_set_keys(rsakey, .make(optional: new_n), .make(optional: new_e), .make(optional: new_d), .make(optional: new_p), .make(optional: new_q), .make(optional: new_dp), .make(optional: new_dq), .make(optional: new_qi))
+        RSA_set0_key(rsakey, new_n, new_e, new_d)
+        RSA_set0_factors(rsakey, new_p, new_q)
+        RSA_set0_crt_params(rsakey, new_dp, new_dq, new_qi)
+        
         let bio = BIO_new(BIO_s_mem())
         defer { BIO_free(bio) }
         
@@ -118,49 +126,73 @@ public class RCTRsaUtils: NSObject {
             "kty": "RSA"
         ] as [String : Any]
         
-        if let d = rsaKey?.pointee.d {
+        if let d = RSA_get0_d(rsaKey) {
             jwk["d"] = bigNumToBase64(d)
         }
-        if let e = rsaKey?.pointee.e {
+        if let e = RSA_get0_e(rsaKey) {
             jwk["e"] = bigNumToBase64(e)
         }
-        if let n = rsaKey?.pointee.n {
+        if let n = RSA_get0_n(rsaKey) {
             jwk["n"] = bigNumToBase64(n)
         }
-        if let p = rsaKey?.pointee.p {
+        if let p = RSA_get0_p(rsaKey) {
             jwk["p"] = bigNumToBase64(p)
         }
-        if let q = rsaKey?.pointee.q {
+        if let q = RSA_get0_q(rsaKey) {
             jwk["q"] = bigNumToBase64(q)
         }
-        if let dp = rsaKey?.pointee.dmp1 {
+        if let dp = RSA_get0_dmp1(rsaKey) {
             jwk["dp"] = bigNumToBase64(dp)
         }
-        if let dq = rsaKey?.pointee.dmq1 {
+        if let dq = RSA_get0_dmq1(rsaKey) {
             jwk["dq"] = bigNumToBase64(dq)
         }
-        if let qi = rsaKey?.pointee.iqmp {
+        if let qi = RSA_get0_iqmp(rsaKey) {
             jwk["qi"] = bigNumToBase64(qi)
         }
         
         return jwk
     }
     
-    private func bigNumToBase64(_ bn: UnsafeMutablePointer<BIGNUM>) -> String {
+    private func bigNumToBase64(_ bn: OpaquePointer) -> String {
         var bytes = [UInt8](repeating: 0, count: Int(BN_num_bits(bn) + 7) / 8)
         BN_bn2bin(bn, &bytes)
         return Data(bytes: bytes, count: bytes.count).base64URLEncode()
     }
     
-    private func base64URLToBignum(_ str: String) throws -> UnsafeMutablePointer<BIGNUM> {
+    private func base64URLToBignum(_ str: String) throws -> OpaquePointer {
         guard let data = str.base64URLDecode() else {
             throw NSError(domain: "", code: 200, userInfo: nil)
         }
         let array = [UInt8](data)
         return array.withUnsafeBufferPointer { p in
-            let bn: UnsafeMutablePointer<BIGNUM> = BN_bin2bn(p.baseAddress, Int32(p.count), nil)
+            let bn: OpaquePointer = OpaquePointer.make(optional: BN_bin2bn(p.baseAddress, Int32(p.count), nil))!
+//            let bn: OpaquePointer = OpaquePointer.
+//            let bn: OpaquePointer = OpaquePointer.make(optional: BN_bin2bn(p.baseAddress, Int32(p.count), nil))!
+            //BN_print_fp(stdout, bn)
             return bn
+            
+//            let bn: OpaquePointer = BN_bin2bn(p.baseAddress, Int32(p.count), nil).map(OpaquePointer.init)
+//            return bn
         }
     }
 }
 
+
+extension OpaquePointer {
+    init(_ ptr: OpaquePointer) {
+        self = ptr
+    }
+
+    static func make(optional ptr: OpaquePointer?) -> OpaquePointer? {
+        return ptr.map(OpaquePointer.init)
+    }
+
+    static func make(optional ptr: UnsafeMutableRawPointer?) -> OpaquePointer? {
+        return ptr.map(OpaquePointer.init)
+    }
+
+    static func make<Pointee>(optional ptr: UnsafeMutablePointer<Pointee>?) -> OpaquePointer? {
+        return ptr.map(OpaquePointer.init)
+    }
+}
diff --git a/node_modules/react-native-simple-crypto/react-native-simple-crypto.podspec b/node_modules/react-native-simple-crypto/react-native-simple-crypto.podspec
index b9d25b4..b5ef866 100644
--- a/node_modules/react-native-simple-crypto/react-native-simple-crypto.podspec
+++ b/node_modules/react-native-simple-crypto/react-native-simple-crypto.podspec
@@ -14,5 +14,5 @@ Pod::Spec.new do |s|
   s.source_files  = "ios/**/*.{h,m,swift}"
 
   s.dependency "React"
-  s.dependency "OpenSSL-Universal"
+  s.dependency "OpenSSL-Universal", '1.1.180'
 end
