// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        buildToolsVersion = "29.0.2"
        minSdkVersion = 21
        compileSdkVersion = 29
        targetSdkVersion = 29
        glideVersion = "4.9.0"
        kotlin_version = "1.3.50"
        supportLibVersion = "28.0.0"
    }
    repositories {
        mavenLocal()
        google()
        jcenter()
        maven {
            url 'https://maven.fabric.io/public'
        }
    }

    def taskRequests = getGradle().getStartParameter().getTaskRequests().toString().toLowerCase()
    def isPlay = !taskRequests.contains("foss")

    dependencies {
        if (isPlay) {
            classpath 'com.google.gms:google-services:4.2.0'
            classpath 'com.google.firebase:firebase-crashlytics-gradle:2.0.0'
            classpath 'com.bugsnag:bugsnag-android-gradle-plugin:4.+'
        }
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        mavenLocal()
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url("$rootDir/../node_modules/react-native/android")
        }
        maven {
            // Android JSC is installed from npm
            url("$rootDir/../node_modules/jsc-android/dist")
        }
        maven {
            url "https://github.com/jitsi/jitsi-maven-repository/raw/master/releases"
        }

        google()
        jcenter()

        maven { url 'https://maven.google.com' }
        maven { url 'https://www.jitpack.io' }
    }
}

subprojects { subproject ->
    afterEvaluate {
        if ((subproject.plugins.hasPlugin('android') || subproject.plugins.hasPlugin('android-library'))) {
            android {
                compileSdkVersion 29
                buildToolsVersion "29.0.2"
                defaultConfig {
                    targetSdkVersion 29
                }
                variantFilter { variant ->
                    def names = variant.flavors*.name
                    if (names.contains("reactNative59")) {
                        setIgnore(true)
                    }
                }
            }
        }
    }
}
